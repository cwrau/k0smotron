{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"k0smotron - The Kubernetes control plane manager","text":"<p>From pets to cattle: Streamline your Kubernetes control plane management with k0smotron</p> <p>Powered by k0s</p>"},{"location":"#features","title":"Features","text":""},{"location":"#kubernetes-in-kubernetes","title":"Kubernetes-in-Kubernetes","text":"<p>k0smotron allows you to easily create and manage the clusters in an existing Kubernetes cluster. This allows unparalled scalability and flexibility when you have to work with many clusters. It allows truly homogenous setup for all control planes and thus eases the maintenance burden.</p>"},{"location":"#true-control-and-worker-plane-separation","title":"True control and worker plane separation","text":"<p>Using k0smotron the clusters controlplane and workerplane are truly separated. The controlplane, running on an existing cluster has no direct networking connection to the workerplane. This is similar patter nhow all the major cloud providers separate the control and worker planes on the managed clusters. </p>"},{"location":"#bring-your-own-workers","title":"Bring your own workers","text":"<p>With k0smotron you can connect worker nodes from ANY infrastructure to your cluster control plane. </p>"},{"location":"#how-does-it-work","title":"How does it work","text":"<p>You install k0smotron operator into an existing Kubernetes cluster. k0smotron operator will create and manage k0s control planes in that cluster. It leverages the natural pattern of working with custom resources to manage the lifecycle of the k0s control planes. k0smotron will automatically create all the needed Kubernetes lower level constructs, such as pods, configmaps etc., to run and manage the control planes.</p> <p>k0smotron is an Kubernetes operator designed to manage the lifecycle of k0s control planes in a Kubernetes (any distro) cluster. By running the control plane on a k8s cluster we can enjoy and leverage the high availability and auto-healing functionalities of the underlying cluster, a.k.a Mothership.</p> <p></p>"},{"location":"#use-cases","title":"Use cases","text":""},{"location":"#cicd","title":"CI/CD","text":"<p>Often when running integration and end-to-end testing for your software running in Kubernetes you need somewhat temporary clusters in CI. Why not leverage the true flexibility and create those clusters on-demand using k0smotron. Creating a controlplane is as easy as creating a custom resource, so is the deletion of it. No more long living snowflake clusters for CI purposes.</p>"},{"location":"#edge","title":"Edge","text":"<p>Running Kubernetes on the network edge usually means running in low resource infrastructure. What this often means is that setting up the controlplane is either a challenge or a mission impossible. Running the controlplane on a existing cluster, on a separate dedicated infrastructure, removes that challenge and let's you focus on the real edge. </p> <p>Running on the edge often also means large number of clusters to manage. Do you really want to dedicate nodes for each cluster controlplane and manage all the infrastructure for those?</p>"},{"location":"#multi-cloud","title":"Multi-cloud","text":"<p>With k0smotron you can run your control plane management cluster (a.k.a Mothership) in one cloud provider and the workloads in various other cloud providers. This allows you to build and maintain a very streamlined approach to multi cloud.</p>"},{"location":"capi-aws/","title":"Cluster API - AWS","text":"<p>This example demonstrates how k0smotron can be used with CAPA (Cluster API Provider Amazon Web Services).</p>"},{"location":"capi-aws/#prerequisites","title":"Prerequisites","text":"<p>Before starting this example, ensure that you have met the general prerequisites. In addition to those, you should also have appropriate AWS credentials available and the AWS CLI configured on your local machine.</p>"},{"location":"capi-aws/#prepare-the-aws-infra-provider","title":"Prepare the AWS infra provider","text":"<p>Before launching a cluster, it's crucial to set up your infrastructure provider. Each provider has its unique prerequisites and configuration steps.</p> <p>Follow the AWS Provider installation guide for detailed steps.</p>"},{"location":"capi-aws/#creating-a-child-cluster","title":"Creating a child cluster","text":"<p>Once all the controllers are up and running, you can apply the cluster manifests containing the specifications of the cluster you want to provision.</p> <p>k0smotron is currently only able to work with externally managed cluster infrastructure.</p> <p>This is because in CAPA there is no way to disable it to provision all control plane related infrastructure (VPC, ELB, etc.). This also renders k0smotron unable to dynamically edit the <code>AWSCluster</code> API endpoint details. Make sure your VPC and subnets you are planning to use fullfill the needed prerequisites.</p> <p>Here is an example:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0s-aws-test\n  namespace: default\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks: [10.244.0.0/16]\n    services:\n      cidrBlocks: [10.96.0.0/12]\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0smotronControlPlane # This tells that k0smotron should create the controlplane\n    name: k0s-aws-test-cp\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta2\n    kind: AWSCluster\n    name: k0s-aws-test\n---\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0smotronControlPlane # This is the config for the controlplane\nmetadata:\n  name: k0s-aws-test-cp\nspec:\n  k0sVersion: v1.27.2-k0s.0\n  persistence:\n    type: emptyDir\n  service:\n    type: LoadBalancer\n    apiPort: 6443\n    konnectivityPort: 8132\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta2\nkind: AWSCluster\nmetadata:\n  name: k0s-aws-test\n  namespace: default\n  annotations:\n    cluster.x-k8s.io/managed-by: k0smotron # This marks the base infra to be self managed. The value of the annotation is irrelevant, as long as there is a value.\nspec:\n  region: eu-central-1\n  sshKeyName: ssh-key\n  network:\n    vpc:\n      id: vpc-12345678901234567 # Machines will be created in this VPC\n    subnets:\n      - id: subnet-099730c9ea2e42134 # Machines will be created in this Subnet\n        availabilityZone: eu-central-1a\n---\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  name: k0s-aws-test-md\n  namespace: default\nspec:\n  clusterName: k0s-aws-test\n  replicas: 1\n  selector:\n    matchLabels:\n      cluster.x-k8s.io/cluster-name: k0s-aws-test\n      pool: worker-pool-1\n  template:\n    metadata:\n      labels:\n        cluster.x-k8s.io/cluster-name: k0s-aws-test\n        pool: worker-pool-1\n    spec:\n      clusterName: k0s-aws-test\n      failureDomain: eu-central-1a\n      bootstrap:\n        configRef: # This triggers our controller to create cloud-init secret\n          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: K0sWorkerConfigTemplate\n          name: k0s-aws-test-machine-config\n      infrastructureRef:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2\n        kind: AWSMachineTemplate\n        name: k0s-aws-test-mt\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta2\nkind: AWSMachineTemplate\nmetadata:\n  name: k0s-aws-test-mt\n  namespace: default\nspec:\n  template:\n    spec:\n      ami:\n        # Replace with your AMI ID\n        id: ami-0989fb15ce71ba39e # Ubuntu 22.04 in eu-central-1 \n      instanceType: t3.large\n      iamInstanceProfile: nodes.cluster-api-provider-aws.sigs.k8s.io # Instance Profile created by `clusterawsadm bootstrap iam create-cloudformation-stack`\n      cloudInit:\n        # Makes CAPA use k0s bootstrap cloud-init directly and not via SSM\n        # Simplifies the VPC setup as we do not need custom SSM endpoints etc.\n        insecureSkipSecretsManager: true\n      subnet:\n        # Make sure this matches the failureDomain in the Machine, i.e. you pick the subnet ID for the AZ\n        id: subnet-099730c9ea2e42134\n      additionalSecurityGroups:\n        - id: sg-01ce46c31291e3447 # Needs to be belong to the subnet\n      sshKeyName: jhennig-key\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfigTemplate\nmetadata:\n  name: k0s-aws-test-machine-config\nspec:\n  template:\n    spec:\n      version: v1.27.2+k0s.0\n      # More details of the worker configuration can be set here\n---\n</code></pre> <p>As we are using self-managed infrastructure we need to manually mark the infrastructure ready. This can be accomplished using the following command: <code>kubectl patch AWSCluster k0s-aws-test --type=merge --subresource status --patch 'status: {ready: true}'.</code></p> <p>After applying the manifests to the management cluster and confirming the infrastructure readiness, allow a few minutes for all components to provision. Once complete, your command line should display output similar to this:</p> <pre><code>% kubectl get cluster,machine\nNAME                                    PHASE         AGE   VERSION\ncluster.cluster.x-k8s.io/k0s-aws-test   Provisioned   16m   \n\nNAME                                         CLUSTER        NODENAME   PROVIDERID                                 PHASE         AGE   VERSION\nmachine.cluster.x-k8s.io/k0s-aws-test-md-0   k0s-aws-test              aws:///eu-central-1a/i-05f2de7da41dc542a   Provisioned   16m   \n</code></pre> <p>You can also check the status of the cluster deployment with <code>clusterctl</code>: <pre><code>% clusterctl describe cluster  \nNAME                                                   READY  SEVERITY  REASON                    SINCE  MESSAGE          \nCluster/k0s-aws-test                                   True                                       25m                      \n\u251c\u2500ClusterInfrastructure - AWSCluster/k0s-aws-test                                                                             \n\u251c\u2500ControlPlane - K0smotronControlPlane/k0s-aws-test-cp                                                                           \n\u2514\u2500Workers                                                                                                                  \n  \u2514\u2500Other\n</code></pre></p>"},{"location":"capi-aws/#networking-options","title":"Networking Options","text":"<p>k0smotron, running in a management cluster in AWS, supports flexible networking options, allowing you to choose between Network Load Balancers (NLB) and Classic Elastic Load Balancers (ELB) based on your requirements for exposing the Control Planes.</p> <p>If you prefer using an NLB instead of ELB, you must specify annotations for the Service in the <code>k0smotronControlPlane</code>. These annotations guide the AWS Cloud Controller Manager (CCM) or the AWS Load Balancer Controller to create the respective services.</p> <pre><code> [...] \n  service:\n    type: LoadBalancer\n    apiPort: 6443\n    konnectivityPort: 8132\n    annotations:\n      service.beta.kubernetes.io/aws-load-balancer-type: \"nlb\"\n</code></pre> <p>For scenarios involving Classic ELBs or NLBs without special options, the AWS CCM can be utilized.</p>"},{"location":"capi-aws/#internal-nlb","title":"Internal NLB","text":"<p>If you aim to use the NLB and set the schema to <code>internal</code>, the target group attribute <code>preserve_client_ip.enabled=false</code> is required due to \"hairpinning\" or \"NAT loopback\". In such cases, the AWS CCM cannot be used because it doesn't support setting Target Group Attributes. Therefore, the AWS Load Balancer Controller, which has the ability to set Target Group Attributes, becomes necessary. Follow this guide to install the AWS Load Balancer Controller.</p> <pre><code> [...] \n  service:\n    type: LoadBalancer\n    apiPort: 6443\n    konnectivityPort: 8132\n    annotations:\n      service.beta.kubernetes.io/aws-load-balancer-type: \"external\" # AWS Loadbalancer Controller creates a NLB when type is \"external\"\n      service.beta.kubernetes.io/aws-load-balancer-internal: \"true\"\n      service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=false\n</code></pre> <p>Note: Please make sure that the Security Group does allow the access to the NLB on port 6443 and 8132 from the management cluster nodes. This access is crucial for Cluster API (CAPI), Cluster API Provider for AWS (CAPA), and k0smotron, as they require access to the Control Plane API. Additionally, the port for the Konnectivity service need to be accessible from worker nodes.</p>"},{"location":"capi-aws/#accessing-the-workload-cluster","title":"Accessing the workload cluster","text":"<p>To access the child cluster we can get the kubeconfig for it with <code>clusterctl get kubeconfig k0s-aws-test</code>. You can then save it to disk and/or import to your favorite tooling like Lens.</p>"},{"location":"capi-aws/#deleting-the-cluster","title":"Deleting the cluster","text":"<p>For cluster deletion, do NOT use <code>kubectl delete -f my-aws-cluster.yaml</code> as that will result into orphan AWS resources. Instead, delete the top level <code>Cluster</code> object. This approach ensures the proper sequence in deleting all child resources, effectively avoid orphan resources.</p>"},{"location":"capi-bootstrap/","title":"Cluster API - Bootstrap provider","text":"<p>k0smotron serves as a Cluster API Bootstrap provider. Given that k0smotron runs the cluster control plane within the management cluster, the Bootstrap provider currently concentrates on worker node bootstrapping.</p> <p>Just like with any other Cluster API provider, you have the flexibility to create either a <code>Machine</code> or <code>MachineDeployment</code> object. While <code>MachineDeployment</code> objects are scalable, certain use-cases necessitate the use of <code>Machine</code>.</p>"},{"location":"capi-bootstrap/#machines","title":"Machines","text":"<p>To configure the machine, you first need to create a <code>Machine</code> object with a reference to a bootstrap provider and configuration for the bootstrapping <code>K0sWorkerConfig</code>:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Machine\nmetadata:\n  name: machine-test-0\n  namespace: default\nspec:\n  clusterName: cp-test\n  bootstrap:\n    configRef: # This triggers our controller to create cloud-init secret\n      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n      kind: K0sWorkerConfig\n      name: machine-test-config\n  infrastructureRef: # This references the infrastructure provider machine object\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: AWSMachine\n    name: machine-test-0\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfig\nmetadata:\n  name: machine-test-config\n  namespace: default\nspec:\n  version: v1.27.2+k0s.0\n  # Details of the worker configuration can be set here\n</code></pre> <p>This configuration sets up a <code>Machine</code> object that will trigger the k0smotron controller to create a cloud-init secret and prepare the machine for bootstrapping. Note that the specific parameters in the <code>K0sWorkerConfig</code> spec will depend on your worker node configuration requirements.</p> <p>For reference on what can be configured via <code>K0sWorkerConfig</code> see the reference docs.</p> <p>The <code>infrastructureRef</code> in the <code>Machine</code> object specifies a reference to the provider-specific infrastructure required for the operation of the machine. In the above example, the kind <code>AWSMachine</code> indicates that the machine will be run on AWS. The parameters within <code>infrastructureRef</code> will be provider-specific and vary based on your chosen infrastructure.</p> <pre><code>apiVersion: infrastructure.cluster.x-k8s.io/v1beta2\nkind: AWSMachine\nmetadata:\n  name: machine-test-0\n  namespace: default\nspec:\n  # More details about the aws machine can be set here\n</code></pre>"},{"location":"capi-bootstrap/#machinedeployments","title":"MachineDeployments","text":"<p>To leverage k0smotron as a Bootstrap provider for <code>MachineDeployment</code> utilize the <code>K0sWorkerConfigTemplate</code> type:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  name: md-test\n  namespace: default\nspec:\n  replicas: 2\n  clusterName: cp-test\n  selector:\n    matchLabels:\n      cluster.x-k8s.io/cluster-name: cp-test\n      pool: worker-pool-1\n  template:\n    metadata:\n      labels:\n        cluster.x-k8s.io/cluster-name: cp-test\n        pool: worker-pool-1\n    spec:\n      clusterName: cp-test\n      bootstrap:\n        configRef:\n          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: K0sWorkerConfigTemplate\n          name: md-test-config\n      infrastructureRef:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: AWSMachineTemplate\n        name: mt-test\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfigTemplate\nmetadata:\n  name: md-test-config\n  namespace: default\nspec:\n  template:\n    spec:\n      version: v1.27.2+k0s.0\n      # More details of the worker configuration can be set here\n</code></pre> <p>The <code>MachineDeployment</code> configuration must be associated with the appropriate infrastructure provider's machine template type. In this example, AWS is used as the infrastructure provider, hence a <code>AWSMachineTemplate</code> is utilized:</p> <pre><code>apiVersion: infrastructure.cluster.x-k8s.io/v1beta2\nkind: AWSMachineTemplate\nmetadata:\n  name: mt-test\n  namespace: default\nspec:\n  template:\n    spec:\n    # More details about the aws machine template can be set here\n</code></pre> <p>This example creates a <code>MachineDeployment</code> with 2 replicas, using k0smotron as the bootstrap provider. The <code>infrastructureRef</code> is used to specify the infrastructure requirements for the machines, in this case, AWS. </p> <p>Check the examples pages for more detailed examples how k0smotron can be used with various Cluster API infrastructure providers.</p>"},{"location":"capi-controlplane-bootstrap/","title":"Cluster API - Control Plane Bootstrap provider","text":"<p>k0smotron can act as a control plane bootstrap provider via usage of <code>K0sControlPlane</code> CRDs.</p> <p>When creating a Cluster with Cluster API you typically need to create a <code>Cluster</code> object. With k0smotron there needs to be a link to the control plane provider <code>K0sControlPlane</code>:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: cp-test\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks:\n        - 10.244.0.0/16\n    services:\n      cidrBlocks:\n        - 10.96.0.0/12\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0sControlPlane\n    name: cp-test\n</code></pre> <p>Next we need to provide the configuration for the actual <code>K0sControlPlane</code> and <code>machineTemplate</code>:</p> <pre><code>---\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0sControlPlane\nmetadata:\n  name: cp-test\nspec:\n  replicas: 3\n  k0sConfigSpec:\n    k0s:\n      apiVersion: k0s.k0sproject.io/v1beta1\n      kind: ClusterConfig\n      metadata:\n        name: k0s\n      spec:\n        api:\n          extraArgs:\n            anonymous-auth: \"true\" # anonymous-auth=true is needed for k0s to allow unauthorized health-checks on /healthz \n  machineTemplate:\n    infrastructureRef:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: DockerMachineTemplate\n      name: cp-test-machine-template\n      namespace: default\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerMachineTemplate\nmetadata:\n  name: cp-test-machine-template\n  namespace: default\nspec:\n  template:\n    spec: {}\n</code></pre> <p>By applying this yaml, k0smotron will create 3 machines based on the <code>MachineTemplate</code> configuration, installs k0s with the role controller on each machine and bootstraps the k0s control plane.</p> <p>For a full reference on <code>K0sControlPlane</code> configurability see the reference docs.</p>"},{"location":"capi-controlplane-bootstrap/#downscaling-the-control-plane","title":"Downscaling the control plane","text":"<p>WARNING: Downscaling is a dangerous operation and should only be done if you know what you are doing.</p> <p>Kubernetes using etcd as its backing store. It's crucial to have a quorum of etcd nodes available at all times. Always run etcd as a cluster of odd members.</p> <p>When downscaling the control plane, you need firstly to deregister the node from the etcd cluster. This can be done by running the following command on the node that will be removed:</p> <pre><code>k0s etcd leave\n</code></pre> <p>NOTE: k0smotron gives node names sequentially and on downscaling it will remove the \"latest\" nodes. For instance, if you have <code>k0smotron-test</code> cluster of 5 nodes and you downscale to 3 nodes, the nodes <code>k0smotron-test-3</code> and <code>k0smotron-test-4</code> will be removed. </p> <p>After removing members from etcd cluster, you can simply edit the <code>K0sControlPlane</code> object and change the <code>spec.replicas</code> field to the desired number of replicas. k0smotron will then automatically scale down the control plane to the desired number of replicas.</p>"},{"location":"capi-controlplane-bootstrap/#running-workloads-on-the-control-plane","title":"Running workloads on the control plane","text":"<p>By default, k0s and k0smotron don't run kubelet and any workloads on control plane nodes. But you can enable it by adding <code>--enable-worker</code> flag to the <code>spec.k0sConfigSpec.args</code> in the <code>K0sControlPlane</code> object. This will enable the kubelet on control plane nodes and allow you to run workloads on them.</p> <pre><code>apiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0sControlPlane\nmetadata:\n  name: docker-test\nspec:\n  replicas: 1\n  k0sConfigSpec:\n    args:\n      - --enable-worker\n      - --no-taints # disable default taints\n  machineTemplate:\n    infrastructureRef:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: DockerMachineTemplate\n      name: docker-test-cp-template\n      namespace: default\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerMachineTemplate\nmetadata:\n  name: docker-test-cp-template\n  namespace: default\nspec:\n  template:\n    spec: {}\n</code></pre> <p>Note: Controller nodes running with <code>--enable-worker</code> are assigned <code>node-role.kubernetes.io/master:NoExecute</code> taint automatically. You can disable default taints using <code>--no-taints</code>  parameter.</p>"},{"location":"capi-controlplane-bootstrap/#client-connection-tunneling","title":"Client connection tunneling","text":"<p>k0smotron supports client connection tunneling to the child cluster's control plane nodes. This is useful when you want to access the control plane nodes from a remote location. To enable tunneling, you need to set <code>spec.k0sConfigSpec.tunneling.enabled</code> to <code>true</code> in the <code>K0sControlPlane</code> object.</p> <pre><code>apiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0sControlPlane\nmetadata:\n  name: docker-test\nspec:\n  replicas: 1\n  k0sConfigSpec:\n    tunneling:\n      enabled: true\n      mode: tunnel # Tunneling mode: tunnel or proxy (default: tunnel)\n</code></pre> <p>K0smotron supports two tunneling modes: <code>tunnel</code> and <code>proxy</code>. You can set the tunneling mode using <code>spec.k0sConfigSpec.tunneling.mode</code> field. The default mode is <code>tunnel</code>.</p> <p>K0smotron will create a kubeconfig file for the tunneling client in the <code>K0sControlPlane</code> object's namespace. You can find the kubeconfig file in the <code>&lt;cluster-name&gt;-&lt;mode&gt;-kubeconfig</code> secret. You can use this kubeconfig file to access the control plane nodes from a remote location.</p> <p>Note: Parent cluster's worker nodes must be accessible from the child cluster's nodes. You can use <code>spec.k0sConfigSpec.tunneling.serverAddress</code> to set the address of the parent cluster's node or load balancer. If you don't set this field, k0smotron will use the random worker node's address as the default address.</p> <p>Currently, k0smotron supports only NodePort service type for tunneling. You can set the tunneling service port using <code>spec.k0sConfigSpec.tunneling.tunnelingNodePort</code> field. The default port is <code>31443</code>.</p>"},{"location":"capi-controlplane/","title":"Cluster API - Control Plane provider","text":"<p>k0smotron can act as a control plane provider via usage of <code>K0smotronControlPlane</code> CRDs.</p> <p>As per usual, you need to define a <code>Cluster</code> object given with a reference to control plane provider: <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: cp-test\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks:\n        - 10.244.0.0/16\n    services:\n      cidrBlocks:\n        - 10.96.0.0/12\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0smotronControlPlane\n    name: cp-test\n</code></pre></p> <p>Next we need to provide the configuration for the actual <code>K0smotronControlPlane</code>:</p> <pre><code>apiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0smotronControlPlane\nmetadata:\n  name: cp-test\nspec:\n  k0sVersion: v1.27.2-k0s.0\n  persistence:\n    type: emptyDir\n  service:\n    type: LoadBalancer\n    apiPort: 6443\n    konnectivityPort: 8132\n</code></pre> <p>Check the examples pages for more detailed examples how k0smotron can be used with various Cluster API infrastructure providers.</p> <p>For a full reference on <code>K0smotronControlPlane</code> configurability see the reference docs.</p>"},{"location":"capi-docker/","title":"Cluster API - Docker","text":"<p>This example demonstrates how k0smotron can be used with CAPD (Cluster API Provider Docker).</p> <p>Please note, CAPD should only be used for development purposes and not for production environments.</p>"},{"location":"capi-docker/#preparations","title":"Preparations","text":"<p>Before starting this example, ensure that you have met the general prerequisites. </p> <p>To initialize the management cluster with Docker infrastrcture provider you can run:</p> <pre><code>clusterctl init --core cluster-api --infrastructure docker\n</code></pre> <p>For more details on Cluster API Provider Docker see it's docs.</p>"},{"location":"capi-docker/#create-the-docker-kind-network","title":"Create the Docker Kind Network","text":"<p>The Cluster API Provider Docker (CAPD) utilizes a network named kind as the default network for certain components it deploys, such as HAProxy. To establish this network, perform the following step:</p> <pre><code>docker network create kind --opt com.docker.network.bridge.enable_ip_masquerade=true\n</code></pre> <p>By executing this command, you are creating a Docker network named 'kind' with IP masquerade enabled, which is necessary for the proper operation of certain CAPD-deployed components.</p>"},{"location":"capi-docker/#creating-a-child-cluster","title":"Creating a child cluster","text":"<p>Once all the controllers are up and running, you can apply the cluster manifests containing the specifications of the cluster you want to provision.</p> <p>Here is an example:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: docker-test\n  namespace: default\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks:\n      - 192.168.0.0/16\n    serviceDomain: cluster.local\n    services:\n      cidrBlocks:\n      - 10.128.0.0/12\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0smotronControlPlane\n    name: docker-test-cp\n    namespace: default\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: DockerCluster\n    name: docker-test\n    namespace: default\n---\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0smotronControlPlane # This is the config for the controlplane\nmetadata:\n  name: docker-test-cp\n  namespace: default\nspec:\n  k0sVersion: v1.27.2-k0s.0\n  persistence:\n    type: emptyDir\n  service:\n    type: NodePort\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerCluster\nmetadata:\n  name: docker-test\n  namespace: default\n  annotations:\n    cluster.x-k8s.io/managed-by: k0smotron # This marks the base infra to be self managed. The value of the annotation is irrelevant, as long as there is a value.\nspec: {}\n  # More details of the DockerCluster can be set here\n---\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  name:  docker-test-md\n  namespace: default\nspec:\n  clusterName: docker-test\n  replicas: 1\n  selector:\n    matchLabels:\n      cluster.x-k8s.io/cluster-name: docker-test\n      pool: worker-pool-1\n  template:\n    metadata:\n      labels:\n        cluster.x-k8s.io/cluster-name: docker-test\n        pool: worker-pool-1\n    spec:\n      clusterName: docker-test\n      version: v1.27.2 # Docker Provider requires a version to be set (see https://hub.docker.com/r/kindest/node/tags)\n      bootstrap:\n        configRef:\n          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: K0sWorkerConfigTemplate\n          name: docker-test-machine-config\n      infrastructureRef:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: DockerMachineTemplate\n        name: docker-test-mt\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: DockerMachineTemplate\nmetadata:\n  name: docker-test-mt\n  namespace: default\nspec:\n  template:\n    spec: {}\n  # More details of the DockerMachineTemplate can be set here\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfigTemplate\nmetadata:\n  name: docker-test-machine-config\nspec:\n  template:\n    spec:\n      version: v1.27.2+k0s.0\n      # More details of the worker configuration can be set here\n</code></pre> <p>After applying the manifests to the management cluster and confirming the infrastructure readiness, allow a few minutes for all components to provision. Once complete, your command line should display output similar to this:</p> <pre><code>% kubectl get cluster,machine\nNAME                                   PHASE         AGE     VERSION\ncluster.cluster.x-k8s.io/docker-test   Provisioned   3m51s   \n\nNAME                                        CLUSTER       NODENAME   PROVIDERID          PHASE         AGE     VERSION\nmachine.cluster.x-k8s.io/docker-test-md-0   docker-test                                  Provisioned   3m50s\n</code></pre> <p>You can also check the status of the cluster deployment with <code>clusterctl describe cluster</code>.</p>"},{"location":"capi-docker/#accessing-the-workload-cluster","title":"Accessing the workload cluster","text":"<p>To access the child cluster we can get the kubeconfig for it with <code>clusterctl get kubeconfig docker-test</code>. You can then save it to disk and/or import to your favorite tooling like Lens</p>"},{"location":"capi-docker/#deleting-the-cluster","title":"Deleting the cluster","text":"<p>For cluster deletion, do NOT use <code>kubectl delete -f my-docker-cluster.yaml</code> as that can result in orphan resources. Instead, delete the top level <code>Cluster</code> object. This approach ensures the proper sequence in deleting all child resources, effectively avoid orphan resources.</p>"},{"location":"capi-examples/","title":"Cluster API - Examples","text":"<p>This section presents a collection of examples showcasing the use of k0smotron as a Cluster API provider across various cloud platforms.</p>"},{"location":"capi-examples/#prerequisites","title":"Prerequisites","text":"<p>The examples herein require the following prerequisites:</p>"},{"location":"capi-examples/#management-cluster","title":"Management cluster","text":"<p>You must have an existing management cluster for these examples. Ensure that <code>kubectl</code> or any other client tooling you use is configured to interact with this cluster.</p> <p>If you don't have a management cluster yet, you can effortlessly create one using k0s.</p>"},{"location":"capi-examples/#k0smotron","title":"k0smotron","text":"<p>Install k0smotron on your management cluster by following this installation guide.</p>"},{"location":"capi-examples/#clusterctl","title":"clusterctl","text":"<p>Lastly, you'll need <code>clusterctl</code> installed on your local machine.</p> <p>Proceed with these examples once you've fulfilled these prerequisites. Each example demonstrates how k0smotron can serve as an efficient Cluster API provider in different environments.</p>"},{"location":"capi-hetzner/","title":"Cluster API - Hetzner","text":"<p>This example demonstrates how k0smotron can be used with CAPH (Cluster API Provider HetznerCloud).</p>"},{"location":"capi-hetzner/#preparations","title":"Preparations","text":"<p>Before starting this example, ensure that you have met the general prerequisites.</p> <p>To initialize the management cluster with Hetzner infrastrcture provider you can run:</p> <pre><code>clusterctl init --core cluster-api --infrastructure hetzner\n</code></pre> <p>For more details on Cluster API Provider Hetzner see it's docs.</p>"},{"location":"capi-hetzner/#token","title":"Token","text":"<p>To be able to provision the infrastructure Hetzner provider you will need a token to interact with the Hetzner API. You'll can create &amp; find the token in your project at \"Security\" in the Hetzner Cloud console.</p>"},{"location":"capi-hetzner/#creating-a-child-cluster","title":"Creating a child cluster","text":"<p>Once all the controllers are up and running, you can apply the cluster manifests containing the specifications of the cluster you want to provision.</p> <p>Here is an example:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: hetzner-test\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks:\n        - 10.244.0.0/16\n    services:\n      cidrBlocks:\n        - 10.96.0.0/12\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0smotronControlPlane # This tells that k0smotron should create the controlplane\n    name: hetzner-test-cp\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: HetznerCluster\n    name: hetzner-test\n---\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0smotronControlPlane # This is the config for the controlplane\nmetadata:\n  name: hetzner-test-cp\nspec:\n  k0sVersion: v1.27.2-k0s.0\n  persistence:\n    type: emptyDir\n  service:\n    type: LoadBalancer\n    apiPort: 6443\n    konnectivityPort: 8132\n    annotations:\n      load-balancer.hetzner.cloud/location: fsn1 \n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: HetznerCluster\nmetadata:\n  name: hetzner-test\n  namespace: default\n  annotations:\n    cluster.x-k8s.io/managed-by: k0smotron # This marks the base infra to be self managed. The value of the annotation is irrelevant, as long as there is a value.\nspec:\n  controlPlaneLoadBalancer:\n    enabled: false\n  controlPlaneEndpoint: # This is just a placeholder, can be anything as k0smotron will overwrite it\n    host: \"1.2.3.4\"\n    port: 6443\n  controlPlaneRegions:\n    - fsn1\n  hetznerSecretRef:\n    name: hetzner\n    key:\n      hcloudToken: hcloud\n---\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  name: hetnzer-test-md\n  namespace: default\nspec:\n  clusterName: hetzner-test\n  replicas: 1\n  selector:\n    matchLabels:\n      cluster.x-k8s.io/cluster-name: hetzner-test\n      pool: worker-pool-1\n  template:\n    metadata:\n      labels:\n        cluster.x-k8s.io/cluster-name: hetzner-test\n        pool: worker-pool-1\n    spec:\n      clusterName: hetzner-test\n      bootstrap:\n        configRef: # This triggers our controller to create cloud-init secret\n          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: K0sWorkerConfigTemplate\n          name: hetzner-test-machine-config\n      infrastructureRef:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n        kind: HCloudMachineTemplate\n        name: hetzner-test-mt\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: HCloudMachineTemplate\nmetadata:\n  name: hetzner-test-mt\n  namespace: default\nspec:\n  imageName: ubuntu-22.04\n  type: cx21\n  sshKeys:\n    - name: ssh-key\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfigTemplate\nmetadata:\n  name: hetzner-test-machine-config\nspec:\n  template:\n    spec:\n      version: v1.27.2+k0s.0\n      # More details of the worker configuration can be set here\n---\napiVersion: v1\nkind: Secret\ndata:\n  hcloud: &lt;base64 encoded token&gt; \nmetadata:\n  name: hetzner\n</code></pre> <p>In the case of <code>HetznerCluster.spec.controlPlaneEndpoint</code> you can add any valid address. k0smotron will overwrite these automatically once the control plane is up and running. You do need to specify some placeholder address as the <code>HetznerCluster</code> object has those marked as mandatory fields.</p> <p>After applying the manifests to the management cluster and confirming the infrastructure readiness, allow a few minutes for all components to provision. Once complete, your command line should display output similar to this:</p> <pre><code>% kubectl get cluster,machine\nNAME                                   PHASE         AGE     VERSION\ncluster.cluster.x-k8s.io/hetzer-test   Provisioned   3m51s   \n\nNAME                                         CLUSTER        NODENAME   PROVIDERID          PHASE         AGE     VERSION\nmachine.cluster.x-k8s.io/hetzner-test-md-0   hetzner-test              hcloud://12345678   Provisioned   3m50s\n</code></pre> <p>You can also check the status of the cluster deployment with <code>clusterctl describe cluster</code>.</p>"},{"location":"capi-hetzner/#accessing-the-workload-cluster","title":"Accessing the workload cluster","text":"<p>To access the child cluster we can get the kubeconfig for it with <code>clusterctl get kubeconfig hetzner-test</code>. You can then save it to disk and/or import to your favorite tooling like Lens.</p>"},{"location":"capi-hetzner/#deleting-the-cluster","title":"Deleting the cluster","text":"<p>For cluster deletion, do NOT use <code>kubectl delete -f my-hetzner-cluster.yaml</code> as that can result in orphan resources. Instead, delete the top level <code>Cluster</code> object. This approach ensures the proper sequence in deleting all child resources, effectively avoid orphan resources.</p>"},{"location":"capi-openstack/","title":"Cluster API - OpenStack","text":"<p>This example demonstrates how k0smotron can be used with CAPO (Cluster API Provider OpenStack).</p>"},{"location":"capi-openstack/#preparations","title":"Preparations","text":"<p>Before starting this example, ensure that you have met the general prerequisites.</p> <p>To initialize the management cluster with OpenStack infrastrcture provider you can run:</p> <pre><code>clusterctl init --infrastructure openstack\n</code></pre> <p>For more details on Cluster API Provider OpenStack see it's docs.</p>"},{"location":"capi-openstack/#openstack-credentials","title":"OpenStack Credentials","text":"<p>To be able to provision the OpenStack provider infrastructre, you will need to setup your OpenStack tenant credentials.</p> <p>Get the openstack Clouds.yaml</p> <p>Download your \u201cOpenStack clouds.yaml file\u201d (Login -&gt; API Access -&gt; Download OpenStack clouds.yaml file)</p> <p>Add \"verify: false\" to your clouds.yaml to avoir having the \"x509: certificate signed by unknown authority\" error. </p> <p>More information here : cluster-api-troubleshooting</p> <pre><code>clouds:\n  openstack:\n    insecure: true\n    verify: false\n    auth:\n      auth_url: https://keystone.yourCloud.yourOrganization.net/\n      username: \"yourUserName\"\n      project_id: \"yourProjectID\"\n      project_name: \"yourProjectName\"\n      project_domain_id: \"yourProjectID\"\n      user_domain_name: \"Default\"\n      password: YourPassWord\n    region_name: \"RegionOne\"\n    interface: \"public\"\n    identity_api_version: 3\n</code></pre> <p>Convert it to base64 to be used in the k0smotron yaml file. See an example below:</p> <pre><code>Y2xvdWRzOgogIG9wZW5zdGFjazoKICAgIGluc2VjdXJlOiB0cnVlCiAgICB2ZXJpZnk6IGZhbHNlCiAgICBhdXRoOgogICAgICBhdXRoX3VybDogaHR0cHM6Ly9rZXlzdG9uZS55b3VyQ2xvdWQueW91ck9yZ2FuaXphdGlvbi5uZXQvCiAgICAgIHVzZXJuYW1lOiAieW91clVzZXJOYW1lIgogICAgICBwcm9qZWN0X2lkOiAieW91clByb2plY3RJRCIKICAgICAgcHJvamVjdF9uYW1lOiAieW91clByb2plY3ROYW1lIgogICAgICBwcm9qZWN0X2RvbWFpbl9pZDogInlvdXJQcm9qZWN0SUQiCiAgICAgIHVzZXJfZG9tYWluX25hbWU6ICJEZWZhdWx0IgogICAgICBwYXNzd29yZDogWW91clBhc3NXb3JkCiAgICByZWdpb25fbmFtZTogIlJlZ2lvbk9uZSIKICAgIGludGVyZmFjZTogInB1YmxpYyIKICAgIGlkZW50aXR5X2FwaV92ZXJzaW9uOiAz\n</code></pre>"},{"location":"capi-openstack/#creating-a-child-cluster","title":"Creating a child cluster","text":"<p>Once all the controllers are up and running, you can apply the cluster manifests containing the specifications of the cluster you want to provision.</p> <p>Here is an example: <pre><code># k0smotron-cluster-with-capo.yaml\napiVersion: v1\ndata:\n  cacert: Cg==\n  clouds.yaml: Y2xvdWRzOgogIG9wZW5zdGFjazoKICAgIGluc2VjdXJlOiB0cnVlCiAgICB2ZXJpZnk6IGZhbHNlCiAgICBhdXRoOgogICAgICBhdXRoX3VybDogaHR0cHM6Ly9rZXlzdG9uZS5pYy1wcy5zc2wubWlyYW50aXMubmV0LwogICAgICB1c2VybmFtZTogIndzb3VhbGhpIgogICAgICBwcm9qZWN0X2lkOiA0MTUzYmFiNDQ2YmY0NDRmYjkzMDY3NzEzODIwNDc1NgogICAgICBwcm9qZWN0X25hbWU6ICJ3c291YWxoaSIKICAgICAgcHJvamVjdF9kb21haW5faWQ6IDQxNTNiYWI0NDZiZjQ0NGZiOTMwNjc3MTM4MjA0NzU2CiAgICAgIHVzZXJfZG9tYWluX25hbWU6ICJEZWZhdWx0IgogICAgICBwYXNzd29yZDogWW91clBhc3NXb3JkCiAgICByZWdpb25fbmFtZTogIlJlZ2lvbk9uZSIKICAgIGludGVyZmFjZTogInB1YmxpYyIKICAgIGlkZW50aXR5X2FwaV92ZXJzaW9uOiAzCg==\nkind: Secret\nmetadata:\n  labels:\n    clusterctl.cluster.x-k8s.io/move: \"true\"\n  name: my-cluster-cloud-config\n  namespace: default\n---\napiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: cluster-openstack\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks:\n      - 192.168.0.0/16\n    serviceDomain: cluster.local\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0smotronControlPlane # This tells that k0smotron should create the controlplane\n    name: cluster-openstack\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha7\n    kind: OpenStackCluster  # This tells that CAPO should create the the worker\n    name: cluster-openstack\n---\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0smotronControlPlane # This is the config for the controlplane\nmetadata:\n  name: cluster-openstack\nspec:\n  k0sVersion: v1.27.2-k0s.0\n  persistence:\n    type: emptyDir\n  service:\n    type: LoadBalancer\n    apiPort: 6443\n    konnectivityPort: 8132\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha7\nkind: OpenStackCluster\nmetadata:\n  name: cluster-openstack\n  namespace: default\n  annotations:\n    cluster.x-k8s.io/managed-by: k0smotron # This marks the base infra to be self managed. The value of the annotation is irrelevant, as long as there is a value.\nspec:\n  cloudName: openstack\n  identityRef:\n    kind: Secret\n    name: cluster-openstack-cloud-config\n  nodeCidr: a.b.c.d/24 #This node cidr corresponds to a network already created in OpenStack\n---\napiVersion: cluster.x-k8s.io/v1beta1\nkind: MachineDeployment\nmetadata:\n  labels:\n    cluster.x-k8s.io/cluster-name: cluster-openstack\n  name: cluster-openstack-worker-vms\n  namespace: default\nspec:\n  clusterName: cluster-openstack\n  replicas: 1\n  selector:\n    matchLabels: {}\n  template:\n    metadata:\n      labels:\n        cluster.x-k8s.io/cluster-name: cluster-openstack\n    spec:\n      clusterName: cluster-openstack\n      failureDomain: nova\n      bootstrap:\n        configRef:\n          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n          kind: K0sWorkerConfigTemplate\n          name: cluster-openstack-machine-config\n      infrastructureRef:\n        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha7\n        kind: OpenStackMachineTemplate\n        name: cluster-openstack-worker-vm-template\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfigTemplate\nmetadata:\n  name: cluster-openstack-machine-config\nspec:\n  template:\n    spec:\n      version: v1.27.2+k0s.0\n      args:\n        - --enable-cloud-provider\n        - --kubelet-extra-args=\"--cloud-provider=external\"\n      # More details of the worker configuration can be set here\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha7\nkind: OpenStackMachineTemplate\nmetadata:\n  name: cluster-openstack-worker-vm-template\n  namespace: default\nspec:\n  template:\n    spec:\n      cloudName: openstack\n      flavor: dev.cfg # your flavor\n      identityRef:\n        kind: Secret\n        name: cluster-openstack-cloud-config\n      image: ubuntu-20.04 # your image\n      sshKeyName: rsa2 # your RSA key name\n      ports:\n      - network:\n          id: YourNetworkID # this corresponds to the network with the cidr provided above a.b.c.d/24\n</code></pre></p> <p>As we are using self-managed infrastructure we need to manually mark the infrastructure ready. This can be accomplished using the following command:</p> <p><pre><code>kubectl patch OpenStackCluster cluster-openstack --type=merge --subresource status --patch 'status: {ready: true}'.\n</code></pre> After applying the manifests to the management cluster and confirming the infrastructure readiness, allow a few minutes for all components to provision. Once complete, your command line should display output similar to this:</p> <pre><code>kubectl get cluster,machine,kmc                                                                                                                   \n\nNAME                                   CLUSTERCLASS   PHASE         AGE     VERSION\ncluster.cluster.x-k8s.io/cluster-openstack                     Provisioned   135m\n\nNAME                                                          CLUSTER       NODENAME   PROVIDERID                                          PHASE         AGE     VERSION\nmachine.cluster.x-k8s.io/cluster-openstack-worker-vms-drjzw-7699d      cluster2                 openstack:///f8f41440-36e6-4e9c-b941-16b95ee95277   Provisioned   135m\n</code></pre> <p>You can also check the status of the cluster deployment with <code>clusterctl</code>: <pre><code>\u276f clusterctl describe cluster cluster3\nNAME                                                                     READY  SEVERITY  REASON                       SINCE  MESSAGE                                                       \nCluster/cluster3                                                         True                                          5d4h                                                                  \n\u251c\u2500ClusterInfrastructure - OpenStackCluster/cluster3                                                                                                                                          \n\u251c\u2500ControlPlane - K0smotronControlPlane/cluster3                                                                                                                                              \n\u2514\u2500Workers                                                                                                                                                           \n    \u2514\u2500Machine/cluster3-worker-vms-929sw-nkhht                            True                                          5d4h                                                                  \n      \u2514\u2500BootstrapConfig - K0sWorkerConfig/cluster3-machine-config-tlg78                                                        \n</code></pre></p>"},{"location":"capi-openstack/#accessing-the-workload-cluster","title":"Accessing the workload cluster","text":"<p>To access the child cluster we can get the kubeconfig for it with <code>clusterctl get kubeconfig cluster-openstack</code>. You can then save it to disk and/or import to your favorite tooling like Lens.</p>"},{"location":"capi-openstack/#deleting-the-cluster","title":"Deleting the cluster","text":"<p>For cluster deletion, do NOT use <code>kubectl delete -f k0smotron-cluster-with-capo.yaml</code> as that can result in orphan resources. Instead, delete the top level <code>Cluster</code> object. This approach ensures the proper sequence in deleting all child resources, effectively avoid orphan resources.</p> <p>To do that, you can use the command <code>clusterctl delete cluster cluster-openstack</code></p>"},{"location":"capi-remote/","title":"Cluster API - Remote machine provider","text":"<p>k0smotron servers as a Cluster API provider for remote machines. A \"remote machine\" in this context means a machine (VM, bare metal) which can be remotely connected via SSH.</p> <p>Just like any other Cluster API provider, k0smotron remote machine provider fullfils the Cluster APi contracts and thus can work with any bootstrap providers.</p> <p>Note</p> <p>k0smotron dev team naturally focuses on testing the remote machine provider with k0s related bootstrap provider. If you see issues with any other bootstrap provider, please create issue in the Github repo.</p>"},{"location":"capi-remote/#using-remotemachines","title":"Using <code>RemoteMachine</code>s","text":"<p>To use <code>RemoteMachine</code>s in your cluster, you naturally need the top-level <code>Cluster</code> definition and control plane:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Cluster\nmetadata:\n  name: remote-test\n  namespace: default\nspec:\n  clusterNetwork:\n    pods:\n      cidrBlocks:\n      - 192.168.0.0/16\n    serviceDomain: cluster.local\n    services:\n      cidrBlocks:\n      - 10.128.0.0/12\n  controlPlaneRef:\n    apiVersion: controlplane.cluster.x-k8s.io/v1beta1\n    kind: K0smotronControlPlane\n    name: remote-test\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: RemoteCluster\n    name: remote-test\napiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0smotronControlPlane\nmetadata:\n  name: remote-test\n  namespace: default\nspec:\n  k0sVersion: v1.27.2-k0s.0\n  persistence:\n    type: emptyDir\n  service:\n    type: NodePort\n</code></pre> <p>To use <code>RemoteMachine</code> instances as part of the cluster, we need to initialize a <code>RemoteCluster</code> object. As in this use case there's really nothing we need to configure on the infrastructure, this is merely a \"placeholder\" object to fullfill Cluster API contracts.</p> <pre><code>apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: RemoteCluster\nmetadata:\n  name: remote-test\n  namespace: default\nspec:\n</code></pre> <p>The bootstrap a <code>Machine</code>, we need to specify the usual Cluster API objects:</p> <pre><code>apiVersion: cluster.x-k8s.io/v1beta1\nkind: Machine\nmetadata:\n  name:  remote-test-0\n  namespace: default\nspec:\n  clusterName: remote-test\n  bootstrap:\n    configRef:\n      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1\n      kind: K0sWorkerConfig\n      name: remote-test-0\n  infrastructureRef:\n    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n    kind: RemoteMachine\n    name: remote-test-0\n---\napiVersion: bootstrap.cluster.x-k8s.io/v1beta1\nkind: K0sWorkerConfig\nmetadata:\n  name: remote-test-0\n  namespace: default\nspec:\n  version: v1.27.2+k0s.0\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: RemoteMachine\nmetadata:\n  name: remote-test-0\n  namespace: default\nspec:\n  address: 1.2.3.4\n  port: 22\n  user: root\n  sshKeyRef:\n    # This defines which SSH key to use for connecting to the machine. The Secret needs to have key 'value' with the SSH private key in it.\n    name: footloose-key\n</code></pre>"},{"location":"capi-remote/#using-remotemachines-in-machinetemplates-of-higher-level-objects","title":"Using <code>RemoteMachine</code>s in <code>machineTemplate</code>s of higher-level objects","text":"<p>Objects like <code>K0sControlPlane</code> or <code>MachineDeployment</code> use <code>machineTemplate</code> to define the template for the <code>Machine</code> objects they create.  Since k0smotron remote machine provider can't create machines on its own, it works with a pool of pre-created machines.</p> <pre><code>---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: RemoteMachineTemplate\nmetadata:\n  name: remote-test-template\n  namespace: default\nspec:\n  template:\n    spec:\n      pool: default\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: PooledRemoteMachine\nmetadata:\n  name: remote-test-0\n  namespace: default\nspec:\n  pool: default\n  machine:\n    address: 1.2.3.4\n    port: 22\n    user: root\n    sshKeyRef:\n      name: footloose-key-0\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1beta1\nkind: PooledRemoteMachine\nmetadata:\n  name: remote-test-1\n  namespace: default\nspec:\n  pool: default\n  machine:\n    address: 2.3.4.5\n    port: 22\n    user: root\n    sshKeyRef:\n      name: footloose-key-1\n</code></pre> <p>Then you can use the <code>RemoteMachineTemplate</code> in the <code>machineTemplate</code> of <code>K0sControlPlane</code>:</p> <pre><code>apiVersion: controlplane.cluster.x-k8s.io/v1beta1\nkind: K0sControlPlane\nmetadata:\n  name: remote-test\nspec:\n  replicas: 1\n  k0sVersion: v1.27.1+k0s.0\n  k0sConfigSpec:\n    k0s:\n      apiVersion: k0s.k0sproject.io/v1beta1\n      kind: ClusterConfig\n      metadata:\n        name: k0s\n      spec:\n        api:\n          extraArgs:\n            anonymous-auth: \"true\"\n  machineTemplate:\n    infrastructureRef:\n      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1\n      kind: RemoteMachineTemplate\n      name: remote-test-template\n      namespace: default\n---\n\u2026 # other objects omitted for brevity\n</code></pre> <p>When CAPI controller creates a <code>RemoteMachine</code> from template object for the <code>K0sControlPlane</code>, k0smotron will pick one of the <code>PooledRemoteMachine</code> objects and use it's values for the <code>RemoteMachine</code> object.</p>"},{"location":"cluster-api/","title":"k0smotron as Cluster API provider","text":"<p>k0smotron can act as a Cluster API provider in several different roles.</p>"},{"location":"cluster-api/#control-plane-provider-in-cluster","title":"Control Plane provider - in-cluster","text":"<p>When k0smotron acts as a control plane provider it will create and manage the cluster control plane within the management cluster, just as in the standalone case.</p>"},{"location":"cluster-api/#control-plane-out-of-cluster","title":"Control Plane - out-of-cluster","text":"<p>k0smotron can function also as a \"traditional\" contol plane provider where the control plane is running on CAPI managed <code>Machines</code>s.</p>"},{"location":"cluster-api/#bootstrap-provider","title":"Bootstrap provider","text":"<p>k0smotron can also act as a bootstrap provider for worker nodes you want to manage via Cluster API. When k0smotron detects a new node that needs to be added to the cluster it will automatically create a new join token needed for the node and creates the provisioning cloud-init script for the node. Once Cluster API controllers sees the node initialization script in place (in a secret) the infrastructure provider will create the needed resources (usually VMs in cloud provider infrastructure) with the k0smotron created cloud-init script.</p>"},{"location":"cluster-api/#remote-machine-provider","title":"Remote Machine provider","text":"<p>k0smotron also provides a ClusterAPI provider to manage and bootstrap cluster <code>Machines</code> remotely via SSH connection. This allows managing the clusters in environment where there's no existing ClusterAPi provider available. Such environments could be for example bare metal environments.</p>"},{"location":"cluster-api/#cluster-autoscaling","title":"Cluster autoscaling","text":"<p>Cluster Autoscaler works with ClusterAPI. You need to deploy an \"instance\" of autoscaler per child cluster in order for it to work properly. If you deploy autoscaler via Helm, here's some values to look out:</p> Value Why? <code>autodiscovery.clusterName</code> Select the child cluster you want to autoscale. E.g. <code>my-cluster</code> <code>cloudProvider</code> Set to <code>clusterapi</code> to make autoscaler work with ClusterAPI <code>clusterAPIKubeconfigSecret</code> Set to the kubeconfig secret created by CAPI. E.g. <code>my-cluster-kubeconfig</code> <code>clusterAPIMode</code> Set to <code>kubeconfig-incluster</code>. Essentially this tells that the child cluster API is accessed with the kubeconfig from the secret and management cluster via <code>incluster</code> kubeconfig <p>RBAC finetuning needed with Helm deployed autoscaler</p> <p>The Helm chart does not take into account the need for autoscaler to access the implementation specific resources in <code>infrastructure.cluster.x-k8s.io</code> group. To fix that you need to modify* the <code>ClusterRole</code> to include e.g.</p> <pre><code>- verbs:\n   - get\n   - list\n   - update\n   - watch\n apiGroups:\n   - infrastructure.cluster.x-k8s.io\n resources:\n   - '*' # You can of course limit this to your specific infrastructure types only, e.g. `AWSMachineDeployment` etc.\n</code></pre> <p>*) Happy to get feedback whether there's a better workaround for this.</p>"},{"location":"cluster/","title":"Creating a cluster","text":"<p>The following example creates a simple cluster named <code>k0smotron-test</code>:</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0smotron-test\nspec: null\nEOF\n</code></pre> <p>This triggers k0smotron controllers to setup the control plane in pods. Once k0smotron is done you can get the admin access kubeconfig:</p> <pre><code>kubectl get secret k0smotron-test-kubeconfig -o jsonpath='{.data.value}' | base64 -d &gt; ~/.kube/child.conf\n</code></pre> <p>Warning: Depending on your configuration, the admin kubeconfig may not be pointing to the right address. If the kubeconfig doesn't work by default, you'll need to set the right value in <code>&lt;server URL&gt;</code>.</p> <pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: &lt;server URL&gt;\n    certificate-authority-data: &lt;redacted&gt;\n  name: k0s\ncontexts:\n- context:\n    cluster: k0s\n    user: admin\n  name: k0s\ncurrent-context: k0s\nkind: Config\npreferences: {}\nusers:\n- name: admin\n  user:\n    client-certificate-data: &lt;redacted&gt;\n    client-key-data: &lt;redacted&gt;\n</code></pre> <p>Once your control plane is ready you can start adding worker nodes into the newly created control plane.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>K0smotron managed control planes are managed using custom resource objects.</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0smotron-test\nspec:\n  replicas: 1\n  k0sImage: k0sproject/k0s\n  k0sVersion: v1.27.1-k0s.0\n  service:\n    type: NodePort\n    apiPort: 30443\n    konnectivityPort: 30132\n  persistence:\n    type: emptyDir\n</code></pre> <p>For full reference of the fields check out the reference docs.</p>"},{"location":"configuration/#k0s-configuration","title":"K0s configuration","text":"<p>K0smotron allows you to configure k0s via <code>spec.k0sConfig</code> field. If empty, the default configuration will be used.</p> <p>Refer to k0s docs for a reference on k0s configuration.</p> <p>Note: Some fields will be overwritten by k0smotron. K0smotron will set the following fields:</p> <ul> <li><code>spec.k0sConfig.spec.api.externalAddress</code> will be set to the value of <code>spec.externalAddress</code> if <code>spec.externalAddress</code> is set.     If not, k0smotron will use load balancer IP or try to detect <code>externalAddress</code> out of nodes IP addresses. </li> <li><code>spec.k0sConfig.spec.api.port</code> will be set to the value of <code>spec.service.apiPort</code>.</li> <li><code>spec.k0sConfig.spec.konnectivity.port</code> will be set to the value of <code>spec.service.konnectivityPort</code>.</li> <li><code>spec.k0sConfig.spec.storage.kine.dataSource</code> will be set to the value of <code>spec.kineDataSourceURL</code> if <code>spec.kineDataSourceURL</code> is set.    <code>spec.k0sConfig.spec.storage.type</code> will be set to <code>kine</code>.</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-is-k0smotron-different-from-typical-multi-cluster-management-solutions-such-as-tanzu-rancher-etc","title":"How is k0smotron different from typical multi-cluster management solutions such as Tanzu, Rancher etc.?","text":"<p>Most of the existing multi-cluster management solutions provision specific infrastructure for the control planes, in most cases VMs. In all of the cases we've looked at the worker plane infrastructure is also provisioned in the same infrastructure with the control plane and thus not allowing you to fully utilize the capabilities of the management cluster.</p>"},{"location":"faq/#how-is-this-different-for-managed-kubernetes-providers","title":"How is this different for managed Kubernetes providers?","text":"<ul> <li>Control and Flexibility: k0smotron gives you full control over your cluster configurations within your existing Kubernetes cluster, offering unparalleled flexibility.</li> <li>Bring Your Own Workers: Unlike managed Kubernetes providers, k0smotron allows you to connect worker nodes from any infrastructure, providing greater freedom and compatibility.</li> <li>Cost Efficiency: By leveraging your existing Kubernetes cluster, k0smotron helps reduce costs associated with managing separate clusters or paying for additional resources.</li> <li>Homogeneous Setup: k0smotron ensures a consistent configuration across clusters, simplifying maintenance and management tasks.</li> </ul>"},{"location":"faq/#what-is-the-relation-of-k0smotron-with-cluster-api","title":"What is the relation of k0smotron with Cluster API?","text":"<p>While k0smotron currently is a \"standalone\" controller for k0s control planes we're looking to expand this as a full Cluster API provider. Or rather set pf providers as were looking to implement both ControlPlane and Bootstrap providers.</p>"},{"location":"ha/","title":"Highly available controlplanes","text":"<p>As the nature of Kubernetes workloads, in this case the cluster control planes, is quite dynamic it poses a challenge to setup highly available Etcd cluster for the control plane. In k0smotron we're solving the challenge by \"externalizing\" the control plane data storage HA setup.</p> <p>The control planes managed by <code>k0smotron</code> are k0s control planes. As k0s comes with support for using SQL DBs as data store (via Kine) you can use HA databases instead of Etcd. This enables you to use e.g. Postgres operator, MySQL operator or cloud provider managed databases as the data store for the control planes.</p>"},{"location":"ha/#using-postgres-operator","title":"Using Postgres operator","text":"<p>In this example we show how to use Postgres operator to manage the control plane data store.</p> <p>Install the operator following the quicstart guide.</p> <p>Create the database with a custom resource: <pre><code>apiVersion: \"acid.zalan.do/v1\"\nkind: postgresql\nmetadata:\n  name: acid-minimal-cluster\nspec:\n  teamId: \"acid\"\n  volume:\n    size: 10Gi\n  numberOfInstances: 2\n  users:\n    # database owner\n    k0smotron:\n    - superuser\n    - createdb\n\n  databases:\n    kine: k0smotron\n  postgresql:\n    version: \"15\"\n</code></pre></p> <p>Once the database has been setup properly, you can instruct k0smotron to create a control plane using it:</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0smotron-test\nspec:\n  replicas: 3\n  service:\n    type: LoadBalancer\n  kineDataSourceURL: postgres://k0smotron:&lt;passwd&gt;@acid-minimal-cluster.default:5432/kine?sslmode=disable\nEOF\n</code></pre> <p>Another option is to use the reference to the secret containing the database credentials:</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-credentials\n  namespace: k0smotron-test\ntype: Opaque\ndata:\n  K0SMOTRON_KINE_DATASOURCE_URL: &lt;base64-encoded-datasource&gt;\n---\napiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0smotron-test\nspec:\n  replicas: 3\n  service:\n    type: LoadBalancer\n  kineDataSourceSecretName: database-credentials\nEOF\n</code></pre> <p>Note: The secret must be in the same namespace as the cluster and the key must be <code>K0SMOTRON_KINE_DATASOURCE_URL</code>.</p>"},{"location":"install/","title":"Installation","text":"<p>To install k0smotron, run the following command:</p> <pre><code>kubectl apply -f https://docs.k0smotron.io/None/install.yaml\n</code></pre> <p>This install the k0smotron controller manager, all the related CRD definitions and needed RBAC rules.</p> <p>Once the installation is completed you are ready to create your first control planes.</p>"},{"location":"install/#clusterctl","title":"clusterctl","text":"<p>k0smotron is compatible with clusterctl and can act as bootstrap, infrastructure, and control plane provider. To use k0smotron with clusterctl, you need to create a clusterctl configuration file. Here's an example:</p> <pre><code>providers:\n  - name: \"k0smotron\"\n    url: \"https://github.com/k0sproject/k0smotron/releases/latest/bootstrap-components.yaml\"\n    type: \"BootstrapProvider\"\n  - name: \"k0smotron\"\n    url: \"https://github.com/k0sproject/k0smotron/releases/latest/control-plane-components.yaml\"\n    type: \"ControlPlaneProvider\"\n  - name: \"k0smotron\"\n    url: \"https://github.com/k0sproject/k0smotron/releases/latest/infrastructure-components.yaml\"\n    type: \"InfrastructureProvider\"\n</code></pre> <p>Once you have the configuration file in place, you can use clusterctl to create a cluster:</p> <pre><code>clusterctl init --bootstrap k0smotron --control-plane k0smotron --config config.yaml\n</code></pre>"},{"location":"join-nodes/","title":"Join worker nodes","text":"<p>Joining worker nodes is pretty much the exact same process as with k0s in general. You need a join token that enables mutual trust between the worker and controller(s) and which allows the node to join the cluster as worker.</p>"},{"location":"join-nodes/#join-tokens","title":"Join Tokens","text":"<p>To get a token, create a <code>JoinTokenRequest</code> resource:</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: JoinTokenRequest\nmetadata:\n  name: my-token\n  namespace: default\nspec:\n  clusterRef:\n    name: my-cluster\n    namespace: default\n</code></pre> <p>The <code>JoinTokenRequest</code> resource will be processed by the controller and a <code>Secret</code> will be created:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: my-token\n  namespace: default\n  labels:\n    k0smotron.io/cluster: my-cluster.default\n    k0smotron.io/role: worker\n    k0smotron.io/token-request: my-token\ntype: Opaque\ndata:\n  token: &lt;base64-encoded-token&gt;\n</code></pre> <p>The <code>token</code> field contains the base64-encoded token that can be used to join a worker node to the cluster.</p> <p>To get the decoded token you can use:</p> <pre><code>kubectl get secret my-token -o jsonpath='{.data.token}' | base64 -d\n</code></pre>"},{"location":"join-nodes/#join-nodes","title":"Join nodes","text":"<p>First you need to get the <code>k0s</code> binary on the node:</p> <pre><code>curl -sSLf https://get.k0s.sh | sudo sh\n</code></pre> <p>The download script accepts the following environment variables:</p> Variable Purpose <code>K0S_VERSION=v{{ no such element: dict object['k8s_version'] }}+k0s.0</code> Select the version of k0s to be installed <code>DEBUG=true</code> Output commands and their arguments at execution. <p>Note: Match the k0s version to the version of the control plane you've created.</p> <p>To join the worker, run k0s in the worker mode with the join token you created:</p> <pre><code>sudo k0s install worker --token-file /path/to/token/file\n</code></pre> <pre><code>sudo k0s start\n</code></pre>"},{"location":"join-nodes/#invalidating-tokens","title":"Invalidating tokens","text":"<p>You can limit the validity period by setting the <code>expiry</code> field in the <code>JoinTokenRequest</code> resource:</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: JoinTokenRequest\nmetadata:\n  name: my-token\n  namespace: default\nspec:\n  clusterRef:\n    name: my-cluster\n    namespace: default\n  expiry: 1h\n</code></pre> <p>To invalidate an issued token, delete the <code>JoinTokenRequest</code> resource:</p> <pre><code>kubectl delete jointokenrequest my-token\n</code></pre>"},{"location":"monitoring/","title":"Control Plane Monitoring","text":"<p>K0smotron provides a mechanism to expose child cluster control plane metrics to a Prometheus instance running in the parent cluster.  This allows you to monitor the control plane components of the child cluster as the usual Kubernetes workload, using the same Prometheus instance that is used to monitor the parent cluster.</p> <p>To enable the monitoring for the k0smotron cluster you need to set <code>spec.enableMonitoring=true</code> in the <code>Cluster</code> resource:</p> <pre><code>apiVersion: k0smotron.io/v1beta1\nkind: Cluster\nmetadata:\n  name: k0smotron-test\nspec:\n  enableMonitoring: true\n</code></pre> <p>This will add two sidecar containers to the control plane pods: - <code>monitoring-agent</code> - a container that will scrape the metrics from the control plane components. - <code>monitoring-proxy</code> - a container with a proxy that will expose the metrics scraped by the <code>monitoring-agent</code> to the parent cluster.</p> <p>All metrics contain the <code>k0smotron_cluster</code> label with the name of the cluster.</p>"},{"location":"resource-reference/","title":"API Reference","text":"<p>Packages:</p> <ul> <li>bootstrap.cluster.x-k8s.io/v1beta1</li> <li>controlplane.cluster.x-k8s.io/v1beta1</li> <li>infrastructure.cluster.x-k8s.io/v1beta1</li> <li>k0smotron.io/v1beta1</li> </ul>"},{"location":"resource-reference/#bootstrapclusterx-k8siov1beta1","title":"bootstrap.cluster.x-k8s.io/v1beta1","text":"<p>Resource Types:</p> <ul> <li>K0sControllerConfig</li> </ul> <ul> <li>K0sWorkerConfig</li> </ul> <ul> <li>K0sWorkerConfigTemplate</li> </ul>"},{"location":"resource-reference/#k0scontrollerconfig","title":"K0sControllerConfig","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string bootstrap.cluster.x-k8s.io/v1beta1 true kind string K0sControllerConfig true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false status object false"},{"location":"resource-reference/#k0scontrollerconfigspec","title":"K0sControllerConfig.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required version string            Version is the version of k0s to use. In case this is not set, the latest version is used. Make sure the version is compatible with the k0s version running on the control plane. For reference see the Kubernetes version skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/ true args []string            Args specifies extra arguments to be passed to k0s worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/ false downloadURL string            DownloadURL specifies the URL from which to download the k0s binary. If the version field is specified, it is ignored, and whatever version is downloaded from the URL is used. false files []object            Files specifies extra files to be passed to user_data upon creation. false k0s object            K0s defines the k0s configuration. Note, that some fields will be overwritten by k0smotron. If empty, will be used default configuration. @see https://docs.k0sproject.io/stable/configuration/ false postStartCommands []string            PostStartCommands specifies commands to be run after starting k0s worker. false preInstalledK0s boolean            PreInstallK0s specifies whether k0s binary is pre-installed on the node. false preStartCommands []string            PreStartCommands specifies commands to be run before starting k0s worker. false tunneling object            Tunneling defines the tunneling configuration for the cluster. false"},{"location":"resource-reference/#k0scontrollerconfigspecfilesindex","title":"K0sControllerConfig.spec.files[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required content string false path string false permissions string false"},{"location":"resource-reference/#k0scontrollerconfigspectunneling","title":"K0sControllerConfig.spec.tunneling","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Tunneling defines the tunneling configuration for the cluster.</p> Name Type Description Required enabled boolean            Enabled specifies whether tunneling is enabled. Default: false false mode enum            Mode describes tunneling mode. If empty, k0smotron will use the default one. Enum: tunnel, proxy Default: tunnel false serverAddress string            Server address of the tunneling server. If empty, k0smotron will try to detect worker node address for. false serverNodePort integer            NodePort to publish for server port of the tunneling server. If empty, k0smotron will use the default one. Format: int32 Default: 31700 false tunnelingNodePort integer            NodePort to publish for tunneling port. If empty, k0smotron will use the default one. Format: int32 Default: 31443 false"},{"location":"resource-reference/#k0scontrollerconfigstatus","title":"K0sControllerConfig.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required dataSecretName string            DataSecretName is the name of the secret that stores the bootstrap data script. false ready boolean            Ready indicates the Bootstrapdata field is ready to be consumed false"},{"location":"resource-reference/#k0sworkerconfig","title":"K0sWorkerConfig","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string bootstrap.cluster.x-k8s.io/v1beta1 true kind string K0sWorkerConfig true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false status object false"},{"location":"resource-reference/#k0sworkerconfigspec","title":"K0sWorkerConfig.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required version string            Version is the version of k0s to use. In case this is not set, the latest version is used. Make sure the version is compatible with the k0s version running on the control plane. For reference see the Kubernetes version skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/ true args []string            Args specifies extra arguments to be passed to k0s worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/ false downloadURL string            DownloadURL specifies the URL to download k0s binary from. If specified the version field is ignored and what ever version is downloaded from the URL is used. false files []object            Files specifies extra files to be passed to user_data upon creation. false joinTokenSecretRef object            JoinTokenSecretRef is a reference to a secret that contains the join token. This should be only set in the case you want to use a pre-generated join token. false postStartCommands []string            PostStartCommands specifies commands to be run after starting k0s worker. false preInstalledK0s boolean            PreInstallK0s specifies whether k0s binary is pre-installed on the node. false preStartCommands []string            PreStartCommands specifies commands to be run before starting k0s worker. false"},{"location":"resource-reference/#k0sworkerconfigspecfilesindex","title":"K0sWorkerConfig.spec.files[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required content string false path string false permissions string false"},{"location":"resource-reference/#k0sworkerconfigspecjointokensecretref","title":"K0sWorkerConfig.spec.joinTokenSecretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>JoinTokenSecretRef is a reference to a secret that contains the join token. This should be only set in the case you want to use a pre-generated join token.</p> Name Type Description Required key string            Key is the key in the secret that contains the join token true name string            Name is the name of the secret true"},{"location":"resource-reference/#k0sworkerconfigstatus","title":"K0sWorkerConfig.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required dataSecretName string            DataSecretName is the name of the secret that stores the bootstrap data script. false ready boolean            Ready indicates the Bootstrapdata field is ready to be consumed false"},{"location":"resource-reference/#k0sworkerconfigtemplate","title":"K0sWorkerConfigTemplate","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string bootstrap.cluster.x-k8s.io/v1beta1 true kind string K0sWorkerConfigTemplate true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false"},{"location":"resource-reference/#k0sworkerconfigtemplatespec","title":"K0sWorkerConfigTemplate.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required template object false"},{"location":"resource-reference/#k0sworkerconfigtemplatespectemplate","title":"K0sWorkerConfigTemplate.spec.template","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required metadata object false spec object false"},{"location":"resource-reference/#k0sworkerconfigtemplatespectemplatemetadata","title":"K0sWorkerConfigTemplate.spec.template.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required annotations map[string]string false finalizers []string false labels map[string]string false name string false namespace string false"},{"location":"resource-reference/#k0sworkerconfigtemplatespectemplatespec","title":"K0sWorkerConfigTemplate.spec.template.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required version string            Version is the version of k0s to use. In case this is not set, the latest version is used. Make sure the version is compatible with the k0s version running on the control plane. For reference see the Kubernetes version skew policy: https://kubernetes.io/docs/setup/release/version-skew-policy/ true args []string            Args specifies extra arguments to be passed to k0s worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/ false downloadURL string            DownloadURL specifies the URL to download k0s binary from. If specified the version field is ignored and what ever version is downloaded from the URL is used. false files []object            Files specifies extra files to be passed to user_data upon creation. false joinTokenSecretRef object            JoinTokenSecretRef is a reference to a secret that contains the join token. This should be only set in the case you want to use a pre-generated join token. false postStartCommands []string            PostStartCommands specifies commands to be run after starting k0s worker. false preInstalledK0s boolean            PreInstallK0s specifies whether k0s binary is pre-installed on the node. false preStartCommands []string            PreStartCommands specifies commands to be run before starting k0s worker. false"},{"location":"resource-reference/#k0sworkerconfigtemplatespectemplatespecfilesindex","title":"K0sWorkerConfigTemplate.spec.template.spec.files[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required content string false path string false permissions string false"},{"location":"resource-reference/#k0sworkerconfigtemplatespectemplatespecjointokensecretref","title":"K0sWorkerConfigTemplate.spec.template.spec.joinTokenSecretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>JoinTokenSecretRef is a reference to a secret that contains the join token. This should be only set in the case you want to use a pre-generated join token.</p> Name Type Description Required key string            Key is the key in the secret that contains the join token true name string            Name is the name of the secret true"},{"location":"resource-reference/#controlplaneclusterx-k8siov1beta1","title":"controlplane.cluster.x-k8s.io/v1beta1","text":"<p>Resource Types:</p> <ul> <li>K0sControllerConfig</li> </ul> <ul> <li>K0sControlPlane</li> </ul> <ul> <li>K0smotronControlPlane</li> </ul>"},{"location":"resource-reference/#k0scontrollerconfig_1","title":"K0sControllerConfig","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string controlplane.cluster.x-k8s.io/v1beta1 true kind string K0sControllerConfig true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false status object false"},{"location":"resource-reference/#k0scontrollerconfigspec_1","title":"K0sControllerConfig.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required args []string            Args specifies extra arguments to be passed to k0s worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/ false downloadURL string            DownloadURL specifies the URL to download k0s binary from. If specified the version field is ignored and what ever version is downloaded from the URL is used. false files []object            Files specifies extra files to be passed to user_data upon creation. false k0s object            K0s defines the k0s configuration. Note, that some fields will be overwritten by k0smotron. If empty, will be used default configuration. @see https://docs.k0sproject.io/stable/configuration/ false postStartCommands []string            PostStartCommands specifies commands to be run after starting k0s worker. false preInstalledK0s boolean            PreInstallK0s specifies whether k0s binary is pre-installed on the node. false preStartCommands []string            PreStartCommands specifies commands to be run before starting k0s worker. false"},{"location":"resource-reference/#k0scontrollerconfigspecfilesindex_1","title":"K0sControllerConfig.spec.files[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required content string false path string false permissions string false"},{"location":"resource-reference/#k0scontrollerconfigstatus_1","title":"K0sControllerConfig.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required dataSecretName string            DataSecretName is the name of the secret that stores the bootstrap data script. false ready boolean            Ready indicates the Bootstrapdata field is ready to be consumed false"},{"location":"resource-reference/#k0scontrolplane","title":"K0sControlPlane","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string controlplane.cluster.x-k8s.io/v1beta1 true kind string K0sControlPlane true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false status object false"},{"location":"resource-reference/#k0scontrolplanespec","title":"K0sControlPlane.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required k0sConfigSpec object true k0sVersion string            K0sVersion defines the k0s version to be deployed. If empty k0smotron will pick it automatically. true machineTemplate object true replicas integer Format: int32 Default: 1 false"},{"location":"resource-reference/#k0scontrolplanespeck0sconfigspec","title":"K0sControlPlane.spec.k0sConfigSpec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required args []string            Args specifies extra arguments to be passed to k0s worker. See: https://docs.k0sproject.io/stable/advanced/worker-configuration/ false downloadURL string            DownloadURL specifies the URL from which to download the k0s binary. If the version field is specified, it is ignored, and whatever version is downloaded from the URL is used. false files []object            Files specifies extra files to be passed to user_data upon creation. false k0s object            K0s defines the k0s configuration. Note, that some fields will be overwritten by k0smotron. If empty, will be used default configuration. @see https://docs.k0sproject.io/stable/configuration/ false postStartCommands []string            PostStartCommands specifies commands to be run after starting k0s worker. false preInstalledK0s boolean            PreInstallK0s specifies whether k0s binary is pre-installed on the node. false preStartCommands []string            PreStartCommands specifies commands to be run before starting k0s worker. false tunneling object            Tunneling defines the tunneling configuration for the cluster. false"},{"location":"resource-reference/#k0scontrolplanespeck0sconfigspecfilesindex","title":"K0sControlPlane.spec.k0sConfigSpec.files[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required content string false path string false permissions string false"},{"location":"resource-reference/#k0scontrolplanespeck0sconfigspectunneling","title":"K0sControlPlane.spec.k0sConfigSpec.tunneling","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Tunneling defines the tunneling configuration for the cluster.</p> Name Type Description Required enabled boolean            Enabled specifies whether tunneling is enabled. Default: false false mode enum            Mode describes tunneling mode. If empty, k0smotron will use the default one. Enum: tunnel, proxy Default: tunnel false serverAddress string            Server address of the tunneling server. If empty, k0smotron will try to detect worker node address for. false serverNodePort integer            NodePort to publish for server port of the tunneling server. If empty, k0smotron will use the default one. Format: int32 Default: 31700 false tunnelingNodePort integer            NodePort to publish for tunneling port. If empty, k0smotron will use the default one. Format: int32 Default: 31443 false"},{"location":"resource-reference/#k0scontrolplanespecmachinetemplate","title":"K0sControlPlane.spec.machineTemplate","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required infrastructureRef object            InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider. true metadata object            Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata false"},{"location":"resource-reference/#k0scontrolplanespecmachinetemplateinfrastructureref","title":"K0sControlPlane.spec.machineTemplate.infrastructureRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>InfrastructureRef is a required reference to a custom resource offered by an infrastructure provider.</p> Name Type Description Required apiVersion string            API version of the referent. false fieldPath string            If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future. false kind string            Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names false namespace string            Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ false resourceVersion string            Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency false uid string            UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids false"},{"location":"resource-reference/#k0scontrolplanespecmachinetemplatemetadata","title":"K0sControlPlane.spec.machineTemplate.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p> Name Type Description Required annotations map[string]string            Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations false labels map[string]string            Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels false"},{"location":"resource-reference/#k0scontrolplanestatus","title":"K0sControlPlane.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required controlPlaneReady boolean true externalManagedControlPlane boolean true initialized boolean true ready boolean            Ready denotes that the control plane is ready true replicas integer Format: int32 true"},{"location":"resource-reference/#k0smotroncontrolplane","title":"K0smotronControlPlane","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string controlplane.cluster.x-k8s.io/v1beta1 true kind string K0smotronControlPlane true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object            ClusterSpec defines the desired state of K0smotronCluster false status object false"},{"location":"resource-reference/#k0smotroncontrolplanespec","title":"K0smotronControlPlane.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ClusterSpec defines the desired state of K0smotronCluster</p> Name Type Description Required certificateRefs []object            CertificateRefs defines the certificate references. false controllerPlaneFlags []string            ControlPlaneFlags allows to configure additional flags for k0s control plane and to override existing ones. The default flags are kept unless they are overriden explicitly. Flags with arguments must be specified as a single string, e.g. --some-flag=argument false enableMonitoring boolean            EnableMonitoring enables prometheus sidecar that scrapes metrics from the child cluster system components and expose them as usual kubernetes pod metrics. false externalAddress string            ExternalAddress defines k0s external address. See https://docs.k0sproject.io/stable/configuration/#specapi Will be detected automatically for service type LoadBalancer. false k0sConfig object            k0sConfig defines the k0s configuration. Note, that some fields will be overwritten by k0smotron. If empty, will be used default configuration. @see https://docs.k0sproject.io/stable/configuration/ false k0sImage string            K0sImage defines the k0s image to be deployed. If empty k0smotron will pick it automatically. Must not include the image tag. Default: k0sproject/k0s false k0sVersion string            K0sVersion defines the k0s version to be deployed. If empty k0smotron will pick it automatically. false kineDataSourceSecretName string            KineDataSourceSecretName defines the name of kine datasource URL secret. KineDataSourceURL or KineDataSourceSecretName are required for HA controlplane setup and one of them must be set if replicas &gt; 1. false kineDataSourceURL string            KineDataSourceURL defines the kine datasource URL. KineDataSourceURL or KineDataSourceSecretName are required for HA controlplane setup and one of them must be set if replicas &gt; 1. false manifests []object            Manifests allows to specify list of volumes with manifests to be deployed in the cluster. The volumes will be mounted in /var/lib/k0s/manifests/, for this reason each manifest is a stack. K0smotron allows any kind of volume, but the recommendation is to use secrets and configmaps. For more information check: https://docs.k0sproject.io/stable/manifests/ and https://kubernetes.io/docs/concepts/storage/volumes false persistence object            Persistence defines the persistence configuration. If empty k0smotron will use emptyDir as a volume. false replicas integer            Replicas is the desired number of replicas of the k0s control planes. If unspecified, defaults to 1. If the value is above 1, k0smotron requires kine datasource URL to be set. Recommended value is 3. Format: int32 Default: 1 false resources object            Resources describes the compute resource requirements for the control plane pods. false service object            Service defines the service configuration. Default: map[apiPort:30443 konnectivityPort:30132 type:ClusterIP] false"},{"location":"resource-reference/#k0smotroncontrolplanespeccertificaterefsindex","title":"K0smotronControlPlane.spec.certificateRefs[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required type enum Enum: ca, sa, proxy true name string false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindex","title":"K0smotronControlPlane.spec.manifests[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Volume represents a named volume in a pod that may be accessed by any container in the pod.</p> Name Type Description Required name string            name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names true awsElasticBlockStore object            awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore false azureDisk object            azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. false azureFile object            azureFile represents an Azure File Service mount on the host and bind mount to the pod. false cephfs object            cephFS represents a Ceph FS mount on the host that shares a pod's lifetime false cinder object            cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md false configMap object            configMap represents a configMap that should populate this volume false csi object            csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature). false downwardAPI object            downwardAPI represents downward API about the pod that should populate this volume false emptyDir object            emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir false ephemeral object            ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.   Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).   Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.   Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.   A pod can use both types of ephemeral volumes and persistent volumes at the same time. false fc object            fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. false flexVolume object            flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. false flocker object            flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running false gcePersistentDisk object            gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk false gitRepo object            gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. false glusterfs object            glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md false hostPath object            hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write. false iscsi object            iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md false nfs object            nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs false persistentVolumeClaim object            persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims false photonPersistentDisk object            photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine false portworxVolume object            portworxVolume represents a portworx volume attached and mounted on kubelets host machine false projected object            projected items for all in one resources secrets, configmaps, and downward API false quobyte object            quobyte represents a Quobyte mount on the host that shares a pod's lifetime false rbd object            rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md false scaleIO object            scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. false secret object            secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret false storageos object            storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. false vsphereVolume object            vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexawselasticblockstore","title":"K0smotronControlPlane.spec.manifests[index].awsElasticBlockStore","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</p> Name Type Description Required volumeID string            volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore true fsType string            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine false partition integer            partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). Format: int32 false readOnly boolean            readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexazuredisk","title":"K0smotronControlPlane.spec.manifests[index].azureDisk","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.</p> Name Type Description Required diskName string            diskName is the Name of the data disk in the blob storage true diskURI string            diskURI is the URI of data disk in the blob storage true cachingMode string            cachingMode is the Host Caching mode: None, Read Only, Read Write. false fsType string            fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false kind string            kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared false readOnly boolean            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexazurefile","title":"K0smotronControlPlane.spec.manifests[index].azureFile","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>azureFile represents an Azure File Service mount on the host and bind mount to the pod.</p> Name Type Description Required secretName string            secretName is the  name of secret that contains Azure Storage Account Name and Key true shareName string            shareName is the azure share Name true readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexcephfs","title":"K0smotronControlPlane.spec.manifests[index].cephfs","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>cephFS represents a Ceph FS mount on the host that shares a pod's lifetime</p> Name Type Description Required monitors []string            monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it true path string            path is Optional: Used as the mounted root, rather than the full Ceph tree, default is / false readOnly boolean            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false secretFile string            secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false secretRef object            secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false user string            user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexcephfssecretref","title":"K0smotronControlPlane.spec.manifests[index].cephfs.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexcinder","title":"K0smotronControlPlane.spec.manifests[index].cinder","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md</p> Name Type Description Required volumeID string            volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md false readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md false secretRef object            secretRef is optional: points to a secret object containing parameters used to connect to OpenStack. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexcindersecretref","title":"K0smotronControlPlane.spec.manifests[index].cinder.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexconfigmap","title":"K0smotronControlPlane.spec.manifests[index].configMap","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>configMap represents a configMap that should populate this volume</p> Name Type Description Required defaultMode integer            defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false items []object            items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false optional boolean            optional specify whether the ConfigMap or its keys must be defined false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexconfigmapitemsindex","title":"K0smotronControlPlane.spec.manifests[index].configMap.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexcsi","title":"K0smotronControlPlane.spec.manifests[index].csi","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).</p> Name Type Description Required driver string            driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster. true fsType string            fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply. false nodePublishSecretRef object            nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed. false readOnly boolean            readOnly specifies a read-only configuration for the volume. Defaults to false (read/write). false volumeAttributes map[string]string            volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexcsinodepublishsecretref","title":"K0smotronControlPlane.spec.manifests[index].csi.nodePublishSecretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexdownwardapi","title":"K0smotronControlPlane.spec.manifests[index].downwardAPI","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>downwardAPI represents downward API about the pod that should populate this volume</p> Name Type Description Required defaultMode integer            Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false items []object            Items is a list of downward API volume file false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexdownwardapiitemsindex","title":"K0smotronControlPlane.spec.manifests[index].downwardAPI.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>DownwardAPIVolumeFile represents information to create the file containing the pod field</p> Name Type Description Required path string            Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' true fieldRef object            Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. false mode integer            Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false resourceFieldRef object            Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexdownwardapiitemsindexfieldref","title":"K0smotronControlPlane.spec.manifests[index].downwardAPI.items[index].fieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.</p> Name Type Description Required fieldPath string            Path of the field to select in the specified API version. true apiVersion string            Version of the schema the FieldPath is written in terms of, defaults to \"v1\". false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexdownwardapiitemsindexresourcefieldref","title":"K0smotronControlPlane.spec.manifests[index].downwardAPI.items[index].resourceFieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</p> Name Type Description Required resource string            Required: resource to select true containerName string            Container name: required for volumes, optional for env vars false divisor int or string            Specifies the output format of the exposed resources, defaults to \"1\" false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexemptydir","title":"K0smotronControlPlane.spec.manifests[index].emptyDir","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir</p> Name Type Description Required medium string            medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir false sizeLimit int or string            sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeral","title":"K0smotronControlPlane.spec.manifests[index].ephemeral","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.   Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).   Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.   Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.   A pod can use both types of ephemeral volumes and persistent volumes at the same time.</p> Name Type Description Required volumeClaimTemplate object            Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `-` where `` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).   An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.   This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.   Required, must not be nil. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplate","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be <code>&lt;pod name&gt;-&lt;volume name&gt;</code> where <code>&lt;volume name&gt;</code> is the name from the <code>PodSpec.Volumes</code> array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).   An existing PVC with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.   This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.   Required, must not be nil.</p> Name Type Description Required spec object            The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here. true metadata object            May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespec","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.</p> Name Type Description Required accessModes []string            accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 false dataSource object            dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. false dataSourceRef object            dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false resources object            resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources false selector object            selector is a label query over volumes to consider for binding. false storageClassName string            storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 false volumeMode string            volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. false volumeName string            volumeName is the binding reference to the PersistentVolume backing this claim. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespecdatasource","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.dataSource","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespecdatasourceref","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.dataSourceRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false namespace string            Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespecresources","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.resources","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources</p> Name Type Description Required claims []object            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers. false limits map[string]int or string            Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false requests map[string]int or string            Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespecresourcesclaimsindex","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.resources.claims[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ResourceClaim references one entry in PodSpec.ResourceClaims.</p> Name Type Description Required name string            Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. true"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespecselector","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.selector","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>selector is a label query over volumes to consider for binding.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatespecselectormatchexpressionsindex","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.selector.matchExpressions[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexephemeralvolumeclaimtemplatemetadata","title":"K0smotronControlPlane.spec.manifests[index].ephemeral.volumeClaimTemplate.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.</p> Name Type Description Required annotations map[string]string false finalizers []string false labels map[string]string false name string false namespace string false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexfc","title":"K0smotronControlPlane.spec.manifests[index].fc","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.</p> Name Type Description Required fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine false lun integer            lun is Optional: FC target lun number Format: int32 false readOnly boolean            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false targetWWNs []string            targetWWNs is Optional: FC target worldwide names (WWNs) false wwids []string            wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexflexvolume","title":"K0smotronControlPlane.spec.manifests[index].flexVolume","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.</p> Name Type Description Required driver string            driver is the name of the driver to use for this volume. true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. false options map[string]string            options is Optional: this field holds extra command options if any. false readOnly boolean            readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false secretRef object            secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexflexvolumesecretref","title":"K0smotronControlPlane.spec.manifests[index].flexVolume.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexflocker","title":"K0smotronControlPlane.spec.manifests[index].flocker","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running</p> Name Type Description Required datasetName string            datasetName is Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated false datasetUUID string            datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexgcepersistentdisk","title":"K0smotronControlPlane.spec.manifests[index].gcePersistentDisk","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</p> Name Type Description Required pdName string            pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk true fsType string            fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine false partition integer            partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk Format: int32 false readOnly boolean            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexgitrepo","title":"K0smotronControlPlane.spec.manifests[index].gitRepo","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.</p> Name Type Description Required repository string            repository is the URL true directory string            directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. false revision string            revision is the commit hash for the specified revision. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexglusterfs","title":"K0smotronControlPlane.spec.manifests[index].glusterfs","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md</p> Name Type Description Required endpoints string            endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod true path string            path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod true readOnly boolean            readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexhostpath","title":"K0smotronControlPlane.spec.manifests[index].hostPath","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.</p> Name Type Description Required path string            path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath true type string            type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexiscsi","title":"K0smotronControlPlane.spec.manifests[index].iscsi","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md</p> Name Type Description Required iqn string            iqn is the target iSCSI Qualified Name. true lun integer            lun represents iSCSI Target Lun number. Format: int32 true targetPortal string            targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). true chapAuthDiscovery boolean            chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication false chapAuthSession boolean            chapAuthSession defines whether support iSCSI Session CHAP authentication false fsType string            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine false initiatorName string            initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface : will be created for the connection. false iscsiInterface string            iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). false portals []string            portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). false readOnly boolean            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. false secretRef object            secretRef is the CHAP Secret for iSCSI target and initiator authentication false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexiscsisecretref","title":"K0smotronControlPlane.spec.manifests[index].iscsi.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is the CHAP Secret for iSCSI target and initiator authentication</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexnfs","title":"K0smotronControlPlane.spec.manifests[index].nfs","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</p> Name Type Description Required path string            path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs true server string            server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs true readOnly boolean            readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexpersistentvolumeclaim","title":"K0smotronControlPlane.spec.manifests[index].persistentVolumeClaim","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</p> Name Type Description Required claimName string            claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims true readOnly boolean            readOnly Will force the ReadOnly setting in VolumeMounts. Default false. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexphotonpersistentdisk","title":"K0smotronControlPlane.spec.manifests[index].photonPersistentDisk","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine</p> Name Type Description Required pdID string            pdID is the ID that identifies Photon Controller persistent disk true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexportworxvolume","title":"K0smotronControlPlane.spec.manifests[index].portworxVolume","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>portworxVolume represents a portworx volume attached and mounted on kubelets host machine</p> Name Type Description Required volumeID string            volumeID uniquely identifies a Portworx volume true fsType string            fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified. false readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojected","title":"K0smotronControlPlane.spec.manifests[index].projected","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>projected items for all in one resources secrets, configmaps, and downward API</p> Name Type Description Required defaultMode integer            defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false sources []object            sources is the list of volume projections false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindex","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Projection that may be projected along with other supported volume types</p> Name Type Description Required configMap object            configMap information about the configMap data to project false downwardAPI object            downwardAPI information about the downwardAPI data to project false secret object            secret information about the secret data to project false serviceAccountToken object            serviceAccountToken is information about the serviceAccountToken data to project false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexconfigmap","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].configMap","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>configMap information about the configMap data to project</p> Name Type Description Required items []object            items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false optional boolean            optional specify whether the ConfigMap or its keys must be defined false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexconfigmapitemsindex","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].configMap.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexdownwardapi","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].downwardAPI","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>downwardAPI information about the downwardAPI data to project</p> Name Type Description Required items []object            Items is a list of DownwardAPIVolume file false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexdownwardapiitemsindex","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].downwardAPI.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>DownwardAPIVolumeFile represents information to create the file containing the pod field</p> Name Type Description Required path string            Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' true fieldRef object            Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. false mode integer            Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false resourceFieldRef object            Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexdownwardapiitemsindexfieldref","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].downwardAPI.items[index].fieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.</p> Name Type Description Required fieldPath string            Path of the field to select in the specified API version. true apiVersion string            Version of the schema the FieldPath is written in terms of, defaults to \"v1\". false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexdownwardapiitemsindexresourcefieldref","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].downwardAPI.items[index].resourceFieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</p> Name Type Description Required resource string            Required: resource to select true containerName string            Container name: required for volumes, optional for env vars false divisor int or string            Specifies the output format of the exposed resources, defaults to \"1\" false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexsecret","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].secret","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secret information about the secret data to project</p> Name Type Description Required items []object            items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false optional boolean            optional field specify whether the Secret or its key must be defined false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexsecretitemsindex","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].secret.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexprojectedsourcesindexserviceaccounttoken","title":"K0smotronControlPlane.spec.manifests[index].projected.sources[index].serviceAccountToken","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>serviceAccountToken is information about the serviceAccountToken data to project</p> Name Type Description Required path string            path is the path relative to the mount point of the file to project the token into. true audience string            audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver. false expirationSeconds integer            expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes. Format: int64 false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexquobyte","title":"K0smotronControlPlane.spec.manifests[index].quobyte","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>quobyte represents a Quobyte mount on the host that shares a pod's lifetime</p> Name Type Description Required registry string            registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes true volume string            volume is a string that references an already created Quobyte volume by name. true group string            group to map volume access to Default is no group false readOnly boolean            readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false. false tenant string            tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin false user string            user to map volume access to Defaults to serivceaccount user false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexrbd","title":"K0smotronControlPlane.spec.manifests[index].rbd","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md</p> Name Type Description Required image string            image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it true monitors []string            monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it true fsType string            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine false keyring string            keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false pool string            pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false readOnly boolean            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false secretRef object            secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false user string            user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexrbdsecretref","title":"K0smotronControlPlane.spec.manifests[index].rbd.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexscaleio","title":"K0smotronControlPlane.spec.manifests[index].scaleIO","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.</p> Name Type Description Required gateway string            gateway is the host address of the ScaleIO API Gateway. true secretRef object            secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail. true system string            system is the name of the storage system as configured in ScaleIO. true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\". false protectionDomain string            protectionDomain is the name of the ScaleIO Protection Domain for the configured storage. false readOnly boolean            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false sslEnabled boolean            sslEnabled Flag enable/disable SSL communication with Gateway, default false false storageMode string            storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. false storagePool string            storagePool is the ScaleIO Storage Pool associated with the protection domain. false volumeName string            volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexscaleiosecretref","title":"K0smotronControlPlane.spec.manifests[index].scaleIO.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexsecret","title":"K0smotronControlPlane.spec.manifests[index].secret","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</p> Name Type Description Required defaultMode integer            defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false items []object            items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false optional boolean            optional field specify whether the Secret or its keys must be defined false secretName string            secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexsecretitemsindex","title":"K0smotronControlPlane.spec.manifests[index].secret.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexstorageos","title":"K0smotronControlPlane.spec.manifests[index].storageos","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.</p> Name Type Description Required fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false secretRef object            secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted. false volumeName string            volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace. false volumeNamespace string            volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexstorageossecretref","title":"K0smotronControlPlane.spec.manifests[index].storageos.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#k0smotroncontrolplanespecmanifestsindexvspherevolume","title":"K0smotronControlPlane.spec.manifests[index].vsphereVolume","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine</p> Name Type Description Required volumePath string            volumePath is the path that identifies vSphere volume vmdk true fsType string            fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false storagePolicyID string            storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName. false storagePolicyName string            storagePolicyName is the storage Policy Based Management (SPBM) profile name. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistence","title":"K0smotronControlPlane.spec.persistence","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Persistence defines the persistence configuration. If empty k0smotron will use emptyDir as a volume.</p> Name Type Description Required type string Default: emptyDir true hostPath string            HostPath defines the host path configuration. Will be used as is in case of .spec.persistence.type is hostPath. false persistentVolumeClaim object            PersistentVolumeClaim defines the PVC configuration. Will be used as is in case of .spec.persistence.type is pvc. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaim","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>PersistentVolumeClaim defines the PVC configuration. Will be used as is in case of .spec.persistence.type is pvc.</p> Name Type Description Required apiVersion string            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources false kind string            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds false metadata object            Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata false spec object            spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims false status object            status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimmetadata","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p> Name Type Description Required annotations map[string]string false finalizers []string false labels map[string]string false name string false namespace string false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspec","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</p> Name Type Description Required accessModes []string            accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 false dataSource object            dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. false dataSourceRef object            dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false resources object            resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources false selector object            selector is a label query over volumes to consider for binding. false storageClassName string            storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 false volumeMode string            volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. false volumeName string            volumeName is the binding reference to the PersistentVolume backing this claim. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspecdatasource","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec.dataSource","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspecdatasourceref","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec.dataSourceRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false namespace string            Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspecresources","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec.resources","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources</p> Name Type Description Required claims []object            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers. false limits map[string]int or string            Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false requests map[string]int or string            Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspecresourcesclaimsindex","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec.resources.claims[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ResourceClaim references one entry in PodSpec.ResourceClaims.</p> Name Type Description Required name string            Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. true"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspecselector","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec.selector","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>selector is a label query over volumes to consider for binding.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimspecselectormatchexpressionsindex","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.spec.selector.matchExpressions[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimstatus","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</p> Name Type Description Required accessModes []string            accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 false allocatedResources map[string]int or string            allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature. false capacity map[string]int or string            capacity represents the actual resources of the underlying volume. false conditions []object            conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'. false phase string            phase represents the current phase of PersistentVolumeClaim. false resizeStatus string            resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature. false"},{"location":"resource-reference/#k0smotroncontrolplanespecpersistencepersistentvolumeclaimstatusconditionsindex","title":"K0smotronControlPlane.spec.persistence.persistentVolumeClaim.status.conditions[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>PersistentVolumeClaimCondition contains details about state of pvc</p> Name Type Description Required status string true type string            PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type true lastProbeTime string            lastProbeTime is the time we probed the condition. Format: date-time false lastTransitionTime string            lastTransitionTime is the time the condition transitioned from one status to another. Format: date-time false message string            message is the human-readable message indicating details about last transition. false reason string            reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized. false"},{"location":"resource-reference/#k0smotroncontrolplanespecresources","title":"K0smotronControlPlane.spec.resources","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Resources describes the compute resource requirements for the control plane pods.</p> Name Type Description Required claims []object            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers. false limits map[string]int or string            Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false requests map[string]int or string            Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false"},{"location":"resource-reference/#k0smotroncontrolplanespecresourcesclaimsindex","title":"K0smotronControlPlane.spec.resources.claims[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ResourceClaim references one entry in PodSpec.ResourceClaims.</p> Name Type Description Required name string            Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. true"},{"location":"resource-reference/#k0smotroncontrolplanespecservice","title":"K0smotronControlPlane.spec.service","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Service defines the service configuration.</p> Name Type Description Required type enum            Service Type string describes ingress methods for a service Enum: ClusterIP, NodePort, LoadBalancer Default: ClusterIP true annotations map[string]string            Annotations defines extra annotations to be added to the service. false apiPort integer            APIPort defines the kubernetes API port. If empty k0smotron will pick it automatically. Default: 30443 false konnectivityPort integer            KonnectivityPort defines the konnectivity port. If empty k0smotron will pick it automatically. Default: 30132 false"},{"location":"resource-reference/#k0smotroncontrolplanestatus","title":"K0smotronControlPlane.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required controlPlaneReady boolean true externalManagedControlPlane boolean true initialized boolean true ready boolean            Ready denotes that the control plane is ready true"},{"location":"resource-reference/#infrastructureclusterx-k8siov1beta1","title":"infrastructure.cluster.x-k8s.io/v1beta1","text":"<p>Resource Types:</p> <ul> <li>PooledRemoteMachine</li> </ul> <ul> <li>RemoteCluster</li> </ul> <ul> <li>RemoteMachine</li> </ul> <ul> <li>RemoteMachineTemplate</li> </ul>"},{"location":"resource-reference/#pooledremotemachine","title":"PooledRemoteMachine","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string infrastructure.cluster.x-k8s.io/v1beta1 true kind string PooledRemoteMachine true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false status object false"},{"location":"resource-reference/#pooledremotemachinespec","title":"PooledRemoteMachine.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required machine object true pool string true"},{"location":"resource-reference/#pooledremotemachinespecmachine","title":"PooledRemoteMachine.spec.machine","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required address string            Address is the IP address or DNS name of the remote machine. true sshKeyRef object            SSHKeyRef is a reference to a secret that contains the SSH private key. The key must be placed on the secret using the key \"value\". true port integer            Port is the SSH port of the remote machine. Default: 22 false user string            User is the user to use when connecting to the remote machine. Default: root false"},{"location":"resource-reference/#pooledremotemachinespecmachinesshkeyref","title":"PooledRemoteMachine.spec.machine.sshKeyRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>SSHKeyRef is a reference to a secret that contains the SSH private key. The key must be placed on the secret using the key \"value\".</p> Name Type Description Required name string            Name is the name of the secret. true"},{"location":"resource-reference/#pooledremotemachinestatus","title":"PooledRemoteMachine.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required machineRef object true reserved boolean true"},{"location":"resource-reference/#pooledremotemachinestatusmachineref","title":"PooledRemoteMachine.status.machineRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required name string true namespace string true"},{"location":"resource-reference/#remotecluster","title":"RemoteCluster","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string infrastructure.cluster.x-k8s.io/v1beta1 true kind string RemoteCluster true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object            RemoteClusterSpec defines the desired state of RemoteCluster false status object            RemoteClusterStatus defines the observed state of RemoteCluster false"},{"location":"resource-reference/#remoteclusterspec","title":"RemoteCluster.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>RemoteClusterSpec defines the desired state of RemoteCluster</p> Name Type Description Required controlPlaneEndpoint object            APIEndpoint represents a reachable Kubernetes API endpoint. true"},{"location":"resource-reference/#remoteclusterspeccontrolplaneendpoint","title":"RemoteCluster.spec.controlPlaneEndpoint","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>APIEndpoint represents a reachable Kubernetes API endpoint.</p> Name Type Description Required host string            The hostname on which the API server is serving. true port integer            The port on which the API server is serving. Format: int32 true"},{"location":"resource-reference/#remoteclusterstatus","title":"RemoteCluster.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>RemoteClusterStatus defines the observed state of RemoteCluster</p> Name Type Description Required ready boolean            Ready denotes that the remote cluster is ready to be used. Default: false true"},{"location":"resource-reference/#remotemachine","title":"RemoteMachine","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string infrastructure.cluster.x-k8s.io/v1beta1 true kind string RemoteMachine true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object            RemoteMachineSpec defines the desired state of RemoteMachine false status object            RemoteMachineStatus defines the observed state of RemoteMachine false"},{"location":"resource-reference/#remotemachinespec","title":"RemoteMachine.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>RemoteMachineSpec defines the desired state of RemoteMachine</p> Name Type Description Required address string            Address is the IP address or DNS name of the remote machine. false pool string            Pool is the name of the pool where the machine belongs to. false port integer            Port is the SSH port of the remote machine. Default: 22 false providerID string            ProviderID is the ID of the machine in the provider. false sshKeyRef object            SSHKeyRef is a reference to a secret that contains the SSH private key. The key must be placed on the secret using the key \"value\". false user string            User is the user to use when connecting to the remote machine. Default: root false"},{"location":"resource-reference/#remotemachinespecsshkeyref","title":"RemoteMachine.spec.sshKeyRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>SSHKeyRef is a reference to a secret that contains the SSH private key. The key must be placed on the secret using the key \"value\".</p> Name Type Description Required name string            Name is the name of the secret. true"},{"location":"resource-reference/#remotemachinestatus","title":"RemoteMachine.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>RemoteMachineStatus defines the observed state of RemoteMachine</p> Name Type Description Required failureMessage string false failureReason string false ready boolean            Ready denotes that the remote machine is ready to be used. false"},{"location":"resource-reference/#remotemachinetemplate","title":"RemoteMachineTemplate","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required apiVersion string infrastructure.cluster.x-k8s.io/v1beta1 true kind string RemoteMachineTemplate true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object false"},{"location":"resource-reference/#remotemachinetemplatespec","title":"RemoteMachineTemplate.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required template object true"},{"location":"resource-reference/#remotemachinetemplatespectemplate","title":"RemoteMachineTemplate.spec.template","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required metadata object false spec object false"},{"location":"resource-reference/#remotemachinetemplatespectemplatemetadata","title":"RemoteMachineTemplate.spec.template.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required annotations map[string]string false finalizers []string false labels map[string]string false name string false namespace string false"},{"location":"resource-reference/#remotemachinetemplatespectemplatespec","title":"RemoteMachineTemplate.spec.template.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required pool string true"},{"location":"resource-reference/#k0smotroniov1beta1","title":"k0smotron.io/v1beta1","text":"<p>Resource Types:</p> <ul> <li>Cluster</li> </ul> <ul> <li>JoinTokenRequest</li> </ul>"},{"location":"resource-reference/#cluster","title":"Cluster","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Cluster is the Schema for the k0smotronclusters API</p> Name Type Description Required apiVersion string k0smotron.io/v1beta1 true kind string Cluster true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object            ClusterSpec defines the desired state of K0smotronCluster Default: map[service:map[type:NodePort]] false status object            ClusterStatus defines the observed state of K0smotronCluster false"},{"location":"resource-reference/#clusterspec","title":"Cluster.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ClusterSpec defines the desired state of K0smotronCluster</p> Name Type Description Required certificateRefs []object            CertificateRefs defines the certificate references. false controllerPlaneFlags []string            ControlPlaneFlags allows to configure additional flags for k0s control plane and to override existing ones. The default flags are kept unless they are overriden explicitly. Flags with arguments must be specified as a single string, e.g. --some-flag=argument false enableMonitoring boolean            EnableMonitoring enables prometheus sidecar that scrapes metrics from the child cluster system components and expose them as usual kubernetes pod metrics. false externalAddress string            ExternalAddress defines k0s external address. See https://docs.k0sproject.io/stable/configuration/#specapi Will be detected automatically for service type LoadBalancer. false k0sConfig object            k0sConfig defines the k0s configuration. Note, that some fields will be overwritten by k0smotron. If empty, will be used default configuration. @see https://docs.k0sproject.io/stable/configuration/ false k0sImage string            K0sImage defines the k0s image to be deployed. If empty k0smotron will pick it automatically. Must not include the image tag. Default: k0sproject/k0s false k0sVersion string            K0sVersion defines the k0s version to be deployed. If empty k0smotron will pick it automatically. false kineDataSourceSecretName string            KineDataSourceSecretName defines the name of kine datasource URL secret. KineDataSourceURL or KineDataSourceSecretName are required for HA controlplane setup and one of them must be set if replicas &gt; 1. false kineDataSourceURL string            KineDataSourceURL defines the kine datasource URL. KineDataSourceURL or KineDataSourceSecretName are required for HA controlplane setup and one of them must be set if replicas &gt; 1. false manifests []object            Manifests allows to specify list of volumes with manifests to be deployed in the cluster. The volumes will be mounted in /var/lib/k0s/manifests/, for this reason each manifest is a stack. K0smotron allows any kind of volume, but the recommendation is to use secrets and configmaps. For more information check: https://docs.k0sproject.io/stable/manifests/ and https://kubernetes.io/docs/concepts/storage/volumes false persistence object            Persistence defines the persistence configuration. If empty k0smotron will use emptyDir as a volume. false replicas integer            Replicas is the desired number of replicas of the k0s control planes. If unspecified, defaults to 1. If the value is above 1, k0smotron requires kine datasource URL to be set. Recommended value is 3. Format: int32 Default: 1 false resources object            Resources describes the compute resource requirements for the control plane pods. false service object            Service defines the service configuration. Default: map[apiPort:30443 konnectivityPort:30132 type:ClusterIP] false"},{"location":"resource-reference/#clusterspeccertificaterefsindex","title":"Cluster.spec.certificateRefs[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> Name Type Description Required type enum Enum: ca, sa, proxy true name string false"},{"location":"resource-reference/#clusterspecmanifestsindex","title":"Cluster.spec.manifests[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Volume represents a named volume in a pod that may be accessed by any container in the pod.</p> Name Type Description Required name string            name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names true awsElasticBlockStore object            awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore false azureDisk object            azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. false azureFile object            azureFile represents an Azure File Service mount on the host and bind mount to the pod. false cephfs object            cephFS represents a Ceph FS mount on the host that shares a pod's lifetime false cinder object            cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md false configMap object            configMap represents a configMap that should populate this volume false csi object            csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature). false downwardAPI object            downwardAPI represents downward API about the pod that should populate this volume false emptyDir object            emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir false ephemeral object            ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.   Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).   Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.   Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.   A pod can use both types of ephemeral volumes and persistent volumes at the same time. false fc object            fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. false flexVolume object            flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. false flocker object            flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running false gcePersistentDisk object            gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk false gitRepo object            gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. false glusterfs object            glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md false hostPath object            hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write. false iscsi object            iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md false nfs object            nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs false persistentVolumeClaim object            persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims false photonPersistentDisk object            photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine false portworxVolume object            portworxVolume represents a portworx volume attached and mounted on kubelets host machine false projected object            projected items for all in one resources secrets, configmaps, and downward API false quobyte object            quobyte represents a Quobyte mount on the host that shares a pod's lifetime false rbd object            rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md false scaleIO object            scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. false secret object            secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret false storageos object            storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. false vsphereVolume object            vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine false"},{"location":"resource-reference/#clusterspecmanifestsindexawselasticblockstore","title":"Cluster.spec.manifests[index].awsElasticBlockStore","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</p> Name Type Description Required volumeID string            volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore true fsType string            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine false partition integer            partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). Format: int32 false readOnly boolean            readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore false"},{"location":"resource-reference/#clusterspecmanifestsindexazuredisk","title":"Cluster.spec.manifests[index].azureDisk","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.</p> Name Type Description Required diskName string            diskName is the Name of the data disk in the blob storage true diskURI string            diskURI is the URI of data disk in the blob storage true cachingMode string            cachingMode is the Host Caching mode: None, Read Only, Read Write. false fsType string            fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false kind string            kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared false readOnly boolean            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false"},{"location":"resource-reference/#clusterspecmanifestsindexazurefile","title":"Cluster.spec.manifests[index].azureFile","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>azureFile represents an Azure File Service mount on the host and bind mount to the pod.</p> Name Type Description Required secretName string            secretName is the  name of secret that contains Azure Storage Account Name and Key true shareName string            shareName is the azure share Name true readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false"},{"location":"resource-reference/#clusterspecmanifestsindexcephfs","title":"Cluster.spec.manifests[index].cephfs","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>cephFS represents a Ceph FS mount on the host that shares a pod's lifetime</p> Name Type Description Required monitors []string            monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it true path string            path is Optional: Used as the mounted root, rather than the full Ceph tree, default is / false readOnly boolean            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false secretFile string            secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false secretRef object            secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false user string            user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it false"},{"location":"resource-reference/#clusterspecmanifestsindexcephfssecretref","title":"Cluster.spec.manifests[index].cephfs.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexcinder","title":"Cluster.spec.manifests[index].cinder","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md</p> Name Type Description Required volumeID string            volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md false readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md false secretRef object            secretRef is optional: points to a secret object containing parameters used to connect to OpenStack. false"},{"location":"resource-reference/#clusterspecmanifestsindexcindersecretref","title":"Cluster.spec.manifests[index].cinder.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexconfigmap","title":"Cluster.spec.manifests[index].configMap","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>configMap represents a configMap that should populate this volume</p> Name Type Description Required defaultMode integer            defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false items []object            items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false optional boolean            optional specify whether the ConfigMap or its keys must be defined false"},{"location":"resource-reference/#clusterspecmanifestsindexconfigmapitemsindex","title":"Cluster.spec.manifests[index].configMap.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#clusterspecmanifestsindexcsi","title":"Cluster.spec.manifests[index].csi","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).</p> Name Type Description Required driver string            driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster. true fsType string            fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply. false nodePublishSecretRef object            nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed. false readOnly boolean            readOnly specifies a read-only configuration for the volume. Defaults to false (read/write). false volumeAttributes map[string]string            volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values. false"},{"location":"resource-reference/#clusterspecmanifestsindexcsinodepublishsecretref","title":"Cluster.spec.manifests[index].csi.nodePublishSecretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexdownwardapi","title":"Cluster.spec.manifests[index].downwardAPI","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>downwardAPI represents downward API about the pod that should populate this volume</p> Name Type Description Required defaultMode integer            Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false items []object            Items is a list of downward API volume file false"},{"location":"resource-reference/#clusterspecmanifestsindexdownwardapiitemsindex","title":"Cluster.spec.manifests[index].downwardAPI.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>DownwardAPIVolumeFile represents information to create the file containing the pod field</p> Name Type Description Required path string            Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' true fieldRef object            Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. false mode integer            Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false resourceFieldRef object            Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. false"},{"location":"resource-reference/#clusterspecmanifestsindexdownwardapiitemsindexfieldref","title":"Cluster.spec.manifests[index].downwardAPI.items[index].fieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.</p> Name Type Description Required fieldPath string            Path of the field to select in the specified API version. true apiVersion string            Version of the schema the FieldPath is written in terms of, defaults to \"v1\". false"},{"location":"resource-reference/#clusterspecmanifestsindexdownwardapiitemsindexresourcefieldref","title":"Cluster.spec.manifests[index].downwardAPI.items[index].resourceFieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</p> Name Type Description Required resource string            Required: resource to select true containerName string            Container name: required for volumes, optional for env vars false divisor int or string            Specifies the output format of the exposed resources, defaults to \"1\" false"},{"location":"resource-reference/#clusterspecmanifestsindexemptydir","title":"Cluster.spec.manifests[index].emptyDir","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir</p> Name Type Description Required medium string            medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir false sizeLimit int or string            sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeral","title":"Cluster.spec.manifests[index].ephemeral","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.   Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).   Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.   Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.   A pod can use both types of ephemeral volumes and persistent volumes at the same time.</p> Name Type Description Required volumeClaimTemplate object            Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `-` where `` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).   An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.   This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.   Required, must not be nil. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplate","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be <code>&lt;pod name&gt;-&lt;volume name&gt;</code> where <code>&lt;volume name&gt;</code> is the name from the <code>PodSpec.Volumes</code> array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).   An existing PVC with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.   This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.   Required, must not be nil.</p> Name Type Description Required spec object            The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here. true metadata object            May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespec","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.</p> Name Type Description Required accessModes []string            accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 false dataSource object            dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. false dataSourceRef object            dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false resources object            resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources false selector object            selector is a label query over volumes to consider for binding. false storageClassName string            storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 false volumeMode string            volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. false volumeName string            volumeName is the binding reference to the PersistentVolume backing this claim. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespecdatasource","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.dataSource","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespecdatasourceref","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.dataSourceRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false namespace string            Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespecresources","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.resources","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources</p> Name Type Description Required claims []object            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers. false limits map[string]int or string            Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false requests map[string]int or string            Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespecresourcesclaimsindex","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.resources.claims[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ResourceClaim references one entry in PodSpec.ResourceClaims.</p> Name Type Description Required name string            Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. true"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespecselector","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.selector","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>selector is a label query over volumes to consider for binding.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatespecselectormatchexpressionsindex","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.spec.selector.matchExpressions[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"resource-reference/#clusterspecmanifestsindexephemeralvolumeclaimtemplatemetadata","title":"Cluster.spec.manifests[index].ephemeral.volumeClaimTemplate.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.</p> Name Type Description Required annotations map[string]string false finalizers []string false labels map[string]string false name string false namespace string false"},{"location":"resource-reference/#clusterspecmanifestsindexfc","title":"Cluster.spec.manifests[index].fc","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.</p> Name Type Description Required fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine false lun integer            lun is Optional: FC target lun number Format: int32 false readOnly boolean            readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false targetWWNs []string            targetWWNs is Optional: FC target worldwide names (WWNs) false wwids []string            wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously. false"},{"location":"resource-reference/#clusterspecmanifestsindexflexvolume","title":"Cluster.spec.manifests[index].flexVolume","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.</p> Name Type Description Required driver string            driver is the name of the driver to use for this volume. true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. false options map[string]string            options is Optional: this field holds extra command options if any. false readOnly boolean            readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false secretRef object            secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts. false"},{"location":"resource-reference/#clusterspecmanifestsindexflexvolumesecretref","title":"Cluster.spec.manifests[index].flexVolume.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexflocker","title":"Cluster.spec.manifests[index].flocker","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running</p> Name Type Description Required datasetName string            datasetName is Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated false datasetUUID string            datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset false"},{"location":"resource-reference/#clusterspecmanifestsindexgcepersistentdisk","title":"Cluster.spec.manifests[index].gcePersistentDisk","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</p> Name Type Description Required pdName string            pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk true fsType string            fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine false partition integer            partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk Format: int32 false readOnly boolean            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk false"},{"location":"resource-reference/#clusterspecmanifestsindexgitrepo","title":"Cluster.spec.manifests[index].gitRepo","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.</p> Name Type Description Required repository string            repository is the URL true directory string            directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. false revision string            revision is the commit hash for the specified revision. false"},{"location":"resource-reference/#clusterspecmanifestsindexglusterfs","title":"Cluster.spec.manifests[index].glusterfs","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md</p> Name Type Description Required endpoints string            endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod true path string            path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod true readOnly boolean            readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod false"},{"location":"resource-reference/#clusterspecmanifestsindexhostpath","title":"Cluster.spec.manifests[index].hostPath","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.</p> Name Type Description Required path string            path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath true type string            type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath false"},{"location":"resource-reference/#clusterspecmanifestsindexiscsi","title":"Cluster.spec.manifests[index].iscsi","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md</p> Name Type Description Required iqn string            iqn is the target iSCSI Qualified Name. true lun integer            lun represents iSCSI Target Lun number. Format: int32 true targetPortal string            targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). true chapAuthDiscovery boolean            chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication false chapAuthSession boolean            chapAuthSession defines whether support iSCSI Session CHAP authentication false fsType string            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine false initiatorName string            initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface : will be created for the connection. false iscsiInterface string            iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). false portals []string            portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). false readOnly boolean            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. false secretRef object            secretRef is the CHAP Secret for iSCSI target and initiator authentication false"},{"location":"resource-reference/#clusterspecmanifestsindexiscsisecretref","title":"Cluster.spec.manifests[index].iscsi.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is the CHAP Secret for iSCSI target and initiator authentication</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexnfs","title":"Cluster.spec.manifests[index].nfs","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</p> Name Type Description Required path string            path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs true server string            server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs true readOnly boolean            readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs false"},{"location":"resource-reference/#clusterspecmanifestsindexpersistentvolumeclaim","title":"Cluster.spec.manifests[index].persistentVolumeClaim","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</p> Name Type Description Required claimName string            claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims true readOnly boolean            readOnly Will force the ReadOnly setting in VolumeMounts. Default false. false"},{"location":"resource-reference/#clusterspecmanifestsindexphotonpersistentdisk","title":"Cluster.spec.manifests[index].photonPersistentDisk","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine</p> Name Type Description Required pdID string            pdID is the ID that identifies Photon Controller persistent disk true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false"},{"location":"resource-reference/#clusterspecmanifestsindexportworxvolume","title":"Cluster.spec.manifests[index].portworxVolume","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>portworxVolume represents a portworx volume attached and mounted on kubelets host machine</p> Name Type Description Required volumeID string            volumeID uniquely identifies a Portworx volume true fsType string            fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified. false readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false"},{"location":"resource-reference/#clusterspecmanifestsindexprojected","title":"Cluster.spec.manifests[index].projected","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>projected items for all in one resources secrets, configmaps, and downward API</p> Name Type Description Required defaultMode integer            defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false sources []object            sources is the list of volume projections false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindex","title":"Cluster.spec.manifests[index].projected.sources[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Projection that may be projected along with other supported volume types</p> Name Type Description Required configMap object            configMap information about the configMap data to project false downwardAPI object            downwardAPI information about the downwardAPI data to project false secret object            secret information about the secret data to project false serviceAccountToken object            serviceAccountToken is information about the serviceAccountToken data to project false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexconfigmap","title":"Cluster.spec.manifests[index].projected.sources[index].configMap","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>configMap information about the configMap data to project</p> Name Type Description Required items []object            items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false optional boolean            optional specify whether the ConfigMap or its keys must be defined false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexconfigmapitemsindex","title":"Cluster.spec.manifests[index].projected.sources[index].configMap.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexdownwardapi","title":"Cluster.spec.manifests[index].projected.sources[index].downwardAPI","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>downwardAPI information about the downwardAPI data to project</p> Name Type Description Required items []object            Items is a list of DownwardAPIVolume file false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexdownwardapiitemsindex","title":"Cluster.spec.manifests[index].projected.sources[index].downwardAPI.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>DownwardAPIVolumeFile represents information to create the file containing the pod field</p> Name Type Description Required path string            Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' true fieldRef object            Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. false mode integer            Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false resourceFieldRef object            Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexdownwardapiitemsindexfieldref","title":"Cluster.spec.manifests[index].projected.sources[index].downwardAPI.items[index].fieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.</p> Name Type Description Required fieldPath string            Path of the field to select in the specified API version. true apiVersion string            Version of the schema the FieldPath is written in terms of, defaults to \"v1\". false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexdownwardapiitemsindexresourcefieldref","title":"Cluster.spec.manifests[index].projected.sources[index].downwardAPI.items[index].resourceFieldRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</p> Name Type Description Required resource string            Required: resource to select true containerName string            Container name: required for volumes, optional for env vars false divisor int or string            Specifies the output format of the exposed resources, defaults to \"1\" false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexsecret","title":"Cluster.spec.manifests[index].projected.sources[index].secret","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secret information about the secret data to project</p> Name Type Description Required items []object            items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false optional boolean            optional field specify whether the Secret or its key must be defined false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexsecretitemsindex","title":"Cluster.spec.manifests[index].projected.sources[index].secret.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#clusterspecmanifestsindexprojectedsourcesindexserviceaccounttoken","title":"Cluster.spec.manifests[index].projected.sources[index].serviceAccountToken","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>serviceAccountToken is information about the serviceAccountToken data to project</p> Name Type Description Required path string            path is the path relative to the mount point of the file to project the token into. true audience string            audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver. false expirationSeconds integer            expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes. Format: int64 false"},{"location":"resource-reference/#clusterspecmanifestsindexquobyte","title":"Cluster.spec.manifests[index].quobyte","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>quobyte represents a Quobyte mount on the host that shares a pod's lifetime</p> Name Type Description Required registry string            registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes true volume string            volume is a string that references an already created Quobyte volume by name. true group string            group to map volume access to Default is no group false readOnly boolean            readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false. false tenant string            tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin false user string            user to map volume access to Defaults to serivceaccount user false"},{"location":"resource-reference/#clusterspecmanifestsindexrbd","title":"Cluster.spec.manifests[index].rbd","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md</p> Name Type Description Required image string            image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it true monitors []string            monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it true fsType string            fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine false keyring string            keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false pool string            pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false readOnly boolean            readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false secretRef object            secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false user string            user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it false"},{"location":"resource-reference/#clusterspecmanifestsindexrbdsecretref","title":"Cluster.spec.manifests[index].rbd.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexscaleio","title":"Cluster.spec.manifests[index].scaleIO","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.</p> Name Type Description Required gateway string            gateway is the host address of the ScaleIO API Gateway. true secretRef object            secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail. true system string            system is the name of the storage system as configured in ScaleIO. true fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\". false protectionDomain string            protectionDomain is the name of the ScaleIO Protection Domain for the configured storage. false readOnly boolean            readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false sslEnabled boolean            sslEnabled Flag enable/disable SSL communication with Gateway, default false false storageMode string            storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. false storagePool string            storagePool is the ScaleIO Storage Pool associated with the protection domain. false volumeName string            volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source. false"},{"location":"resource-reference/#clusterspecmanifestsindexscaleiosecretref","title":"Cluster.spec.manifests[index].scaleIO.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexsecret","title":"Cluster.spec.manifests[index].secret","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</p> Name Type Description Required defaultMode integer            defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false items []object            items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. false optional boolean            optional field specify whether the Secret or its keys must be defined false secretName string            secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret false"},{"location":"resource-reference/#clusterspecmanifestsindexsecretitemsindex","title":"Cluster.spec.manifests[index].secret.items[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Maps a string key to a path within a volume.</p> Name Type Description Required key string            key is the key to project. true path string            path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. true mode integer            mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Format: int32 false"},{"location":"resource-reference/#clusterspecmanifestsindexstorageos","title":"Cluster.spec.manifests[index].storageos","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.</p> Name Type Description Required fsType string            fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false readOnly boolean            readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. false secretRef object            secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted. false volumeName string            volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace. false volumeNamespace string            volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. false"},{"location":"resource-reference/#clusterspecmanifestsindexstorageossecretref","title":"Cluster.spec.manifests[index].storageos.secretRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.</p> Name Type Description Required name string            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid? false"},{"location":"resource-reference/#clusterspecmanifestsindexvspherevolume","title":"Cluster.spec.manifests[index].vsphereVolume","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine</p> Name Type Description Required volumePath string            volumePath is the path that identifies vSphere volume vmdk true fsType string            fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. false storagePolicyID string            storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName. false storagePolicyName string            storagePolicyName is the storage Policy Based Management (SPBM) profile name. false"},{"location":"resource-reference/#clusterspecpersistence","title":"Cluster.spec.persistence","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Persistence defines the persistence configuration. If empty k0smotron will use emptyDir as a volume.</p> Name Type Description Required type string Default: emptyDir true hostPath string            HostPath defines the host path configuration. Will be used as is in case of .spec.persistence.type is hostPath. false persistentVolumeClaim object            PersistentVolumeClaim defines the PVC configuration. Will be used as is in case of .spec.persistence.type is pvc. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaim","title":"Cluster.spec.persistence.persistentVolumeClaim","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>PersistentVolumeClaim defines the PVC configuration. Will be used as is in case of .spec.persistence.type is pvc.</p> Name Type Description Required apiVersion string            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources false kind string            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds false metadata object            Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata false spec object            spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims false status object            status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimmetadata","title":"Cluster.spec.persistence.persistentVolumeClaim.metadata","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata</p> Name Type Description Required annotations map[string]string false finalizers []string false labels map[string]string false name string false namespace string false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspec","title":"Cluster.spec.persistence.persistentVolumeClaim.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</p> Name Type Description Required accessModes []string            accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 false dataSource object            dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource. false dataSourceRef object            dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false resources object            resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources false selector object            selector is a label query over volumes to consider for binding. false storageClassName string            storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 false volumeMode string            volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. false volumeName string            volumeName is the binding reference to the PersistentVolume backing this claim. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspecdatasource","title":"Cluster.spec.persistence.persistentVolumeClaim.spec.dataSource","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspecdatasourceref","title":"Cluster.spec.persistence.persistentVolumeClaim.spec.dataSourceRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.</p> Name Type Description Required kind string            Kind is the type of resource being referenced true name string            Name is the name of resource being referenced true apiGroup string            APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. false namespace string            Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspecresources","title":"Cluster.spec.persistence.persistentVolumeClaim.spec.resources","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources</p> Name Type Description Required claims []object            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers. false limits map[string]int or string            Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false requests map[string]int or string            Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspecresourcesclaimsindex","title":"Cluster.spec.persistence.persistentVolumeClaim.spec.resources.claims[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ResourceClaim references one entry in PodSpec.ResourceClaims.</p> Name Type Description Required name string            Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. true"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspecselector","title":"Cluster.spec.persistence.persistentVolumeClaim.spec.selector","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>selector is a label query over volumes to consider for binding.</p> Name Type Description Required matchExpressions []object            matchExpressions is a list of label selector requirements. The requirements are ANDed. false matchLabels map[string]string            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimspecselectormatchexpressionsindex","title":"Cluster.spec.persistence.persistentVolumeClaim.spec.selector.matchExpressions[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.</p> Name Type Description Required key string            key is the label key that the selector applies to. true operator string            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. true values []string            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimstatus","title":"Cluster.spec.persistence.persistentVolumeClaim.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</p> Name Type Description Required accessModes []string            accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 false allocatedResources map[string]int or string            allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature. false capacity map[string]int or string            capacity represents the actual resources of the underlying volume. false conditions []object            conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'. false phase string            phase represents the current phase of PersistentVolumeClaim. false resizeStatus string            resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature. false"},{"location":"resource-reference/#clusterspecpersistencepersistentvolumeclaimstatusconditionsindex","title":"Cluster.spec.persistence.persistentVolumeClaim.status.conditions[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>PersistentVolumeClaimCondition contains details about state of pvc</p> Name Type Description Required status string true type string            PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type true lastProbeTime string            lastProbeTime is the time we probed the condition. Format: date-time false lastTransitionTime string            lastTransitionTime is the time the condition transitioned from one status to another. Format: date-time false message string            message is the human-readable message indicating details about last transition. false reason string            reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized. false"},{"location":"resource-reference/#clusterspecresources","title":"Cluster.spec.resources","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Resources describes the compute resource requirements for the control plane pods.</p> Name Type Description Required claims []object            Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.   This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.   This field is immutable. It can only be set for containers. false limits map[string]int or string            Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false requests map[string]int or string            Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ false"},{"location":"resource-reference/#clusterspecresourcesclaimsindex","title":"Cluster.spec.resources.claims[index]","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ResourceClaim references one entry in PodSpec.ResourceClaims.</p> Name Type Description Required name string            Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container. true"},{"location":"resource-reference/#clusterspecservice","title":"Cluster.spec.service","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>Service defines the service configuration.</p> Name Type Description Required type enum            Service Type string describes ingress methods for a service Enum: ClusterIP, NodePort, LoadBalancer Default: ClusterIP true annotations map[string]string            Annotations defines extra annotations to be added to the service. false apiPort integer            APIPort defines the kubernetes API port. If empty k0smotron will pick it automatically. Default: 30443 false konnectivityPort integer            KonnectivityPort defines the konnectivity port. If empty k0smotron will pick it automatically. Default: 30132 false"},{"location":"resource-reference/#clusterstatus","title":"Cluster.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ClusterStatus defines the observed state of K0smotronCluster</p> Name Type Description Required reconciliationStatus string true ready boolean false"},{"location":"resource-reference/#jointokenrequest","title":"JoinTokenRequest","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>JoinTokenRequest is the Schema for the join token request API</p> Name Type Description Required apiVersion string k0smotron.io/v1beta1 true kind string JoinTokenRequest true metadata object Refer to the Kubernetes API documentation for the fields of the `metadata` field. true spec object            JoinTokenRequestSpec defines the desired state of K0smotronJoinTokenRequest false status object            JoinTokenRequestStatus defines the observed state of K0smotronJoinTokenRequest false"},{"location":"resource-reference/#jointokenrequestspec","title":"JoinTokenRequest.spec","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>JoinTokenRequestSpec defines the desired state of K0smotronJoinTokenRequest</p> Name Type Description Required clusterRef object            ClusterRef is the reference to the cluster for which the join token is requested. true expiry string            Expiration time of the token. Format 1.5h, 2h45m or 300ms. Default: 0s false role enum            Role of the node for which the token is requested (worker or controller). Enum: worker, controller Default: worker false"},{"location":"resource-reference/#jointokenrequestspecclusterref","title":"JoinTokenRequest.spec.clusterRef","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>ClusterRef is the reference to the cluster for which the join token is requested.</p> Name Type Description Required name string            Name of the cluster. true namespace string            Namespace of the cluster. true"},{"location":"resource-reference/#jointokenrequeststatus","title":"JoinTokenRequest.status","text":"<p><sup><sup>\u21a9 Parent</sup></sup></p> <p>JoinTokenRequestStatus defines the observed state of K0smotronJoinTokenRequest</p> Name Type Description Required reconciliationStatus string true tokenID string false"},{"location":"status/","title":"Project status","text":"<p>We\u2019re really early on with the project and as always with any young project there are probably some sharp corners. But with the help of the open source community we plan to iron out those in the coming months.</p> <p>At this point we can not give much guarantees over backwards and forwards compatibility so expect things to break a bit with upcoming releases of k0smotron.</p> <p>We wanted to release k0smotron as early as possible to see whether there is in general interest of running k0s control planes as Kubernetes resources. We are excited about the potential that k0smotron brings to the table, and we look forward to seeing how it can transform the way you manage your Kubernetes deployments.</p>"},{"location":"status/#cluster-api","title":"Cluster API","text":"<p>One of the directions we're looking at is the have k0smotron working as a Cluster API provider for both <code>ControlPlane</code> and worker <code>Bootstrap</code> providers. What this means is that you could utilize Cluster API to provision both the control plane, within the management cluster, and worker nodes in your favourite infrastructure supporting cluster API.</p>"},{"location":"status/#known-limitations","title":"Known limitations","text":"<p>Some of the areas we know have lot of shortcomings currently: - Control Plane configurability: As you know, k0s itself has lot of configurability, we plan to enable full configurability of the k0s control plane - Control plane exposing: Currently k0smotron only supports <code>NodePort</code> and <code>LoadBalancer</code> type services. While that is in itself quite ok quite often there's need to further configure e.g. annotations etc. on the created service to make them play nice with cloud provider implementations. - Updates: While k0smotron is able to update the cluster controlplane easily the update does not strecth into worker nodes. - </p>"},{"location":"usage-overview/","title":"k0smotron usage","text":"<p>k0smotron can be use either as a \"standalone\" manager for Kubernetes control planes or as a Cluster API provider for several ClusterAPI \"roles\".</p>"},{"location":"usage-overview/#standalone","title":"Standalone","text":"<p>In standalone mode k0smotron will manage ONLY the controlplanes running in the management cluster. To get started creating and managing control planes with k0smotron see cluster creation docs.</p>"},{"location":"usage-overview/#cluster-api-provider","title":"Cluster API provider","text":"<p>k0smotron can act as a ClusterAPI provider in several cases:</p> <ul> <li>ControlPlane provider: k0smotron manages the controlplane within the management cluster</li> <li>Control plane Bootstrap provider: k0smotron acts as a bootstrap provider for <code>Machine</code>s running the control plane</li> <li>Bootstrap provider: k0smotron acts as the bootstrap (config) provider for worker machines</li> <li>Remote machine provider: k0smotron acts as a infrastructure provider, enabling configuring <code>Machine</code>s on existing infrastructure over SSH</li> </ul>"}]}